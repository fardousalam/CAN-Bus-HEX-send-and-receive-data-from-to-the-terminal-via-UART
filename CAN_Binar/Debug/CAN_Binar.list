
CAN_Binar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000597c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb0  08005eb0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb0  08005eb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000074  08005f2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005f2c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d38a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002159  00000000  00000000  0002d42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021425  00000000  00000000  00030810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8cf  00000000  00000000  00051c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c46e6  00000000  00000000  0005d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000313c  00000000  00000000  00121c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b04 	.word	0x08005b04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005b04 	.word	0x08005b04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fd41 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f921 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 fa59 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 fa27 	bl	80006f4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002a6:	f000 f979 	bl	800059c <MX_CAN_Init>
  MX_NVIC_Init();
 80002aa:	f000 fa0f 	bl	80006cc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint16_t len_of_data = strlen(user_data);
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <main+0x54>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff94 	bl	80001e0 <strlen>
 80002b8:	4603      	mov	r3, r0
 80002ba:	80fb      	strh	r3, [r7, #6]
  HAL_UART_Transmit(&huart2,(uint8_t*)user_data,len_of_data,HAL_MAX_DELAY);
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <main+0x54>)
 80002be:	6819      	ldr	r1, [r3, #0]
 80002c0:	88fa      	ldrh	r2, [r7, #6]
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	4808      	ldr	r0, [pc, #32]	; (80002e8 <main+0x58>)
 80002c8:	f003 fabc 	bl	8003844 <HAL_UART_Transmit>


  while(reception_complete != TRUE)
 80002cc:	e004      	b.n	80002d8 <main+0x48>
            	 	          	        {


    	                                    	HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 80002ce:	2201      	movs	r2, #1
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <main+0x5c>)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <main+0x58>)
 80002d4:	f003 fb4a 	bl	800396c <HAL_UART_Receive_IT>
  while(reception_complete != TRUE)
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <main+0x60>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d1f6      	bne.n	80002ce <main+0x3e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x50>
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000
 80002e8:	2000012c 	.word	0x2000012c
 80002ec:	200000b4 	.word	0x200000b4
 80002f0:	20000094 	.word	0x20000094

080002f4 <HAL_UART_RxCpltCallback>:
   //marking the end of the string
   output[i++] = '\0';
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback-Funktion für Empfangs interrupt
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09e      	sub	sp, #120	; 0x78
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,&recvd_data,1);        //  Empfangs interrupt funktion
 80002fc:	2201      	movs	r2, #1
 80002fe:	496d      	ldr	r1, [pc, #436]	; (80004b4 <HAL_UART_RxCpltCallback+0x1c0>)
 8000300:	486d      	ldr	r0, [pc, #436]	; (80004b8 <HAL_UART_RxCpltCallback+0x1c4>)
 8000302:	f003 fb33 	bl	800396c <HAL_UART_Receive_IT>

	 if(recvd_data == '\r')                         //   wenn "Enter" gedrückt wird, ist der Empfang abgeschlossen
 8000306:	4b6b      	ldr	r3, [pc, #428]	; (80004b4 <HAL_UART_RxCpltCallback+0x1c0>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b0d      	cmp	r3, #13
 800030c:	f040 80c5 	bne.w	800049a <HAL_UART_RxCpltCallback+0x1a6>
		 {
			 reception_complete = TRUE;
 8000310:	4b6a      	ldr	r3, [pc, #424]	; (80004bc <HAL_UART_RxCpltCallback+0x1c8>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]

                    char *args[15];
			        int i =0; int j=0;
 8000316:	2300      	movs	r3, #0
 8000318:	677b      	str	r3, [r7, #116]	; 0x74
 800031a:	2300      	movs	r3, #0
 800031c:	673b      	str	r3, [r7, #112]	; 0x70
			        char *token = strtok(data_buffer, " \t\n"); //string aufteilen
 800031e:	4968      	ldr	r1, [pc, #416]	; (80004c0 <HAL_UART_RxCpltCallback+0x1cc>)
 8000320:	4868      	ldr	r0, [pc, #416]	; (80004c4 <HAL_UART_RxCpltCallback+0x1d0>)
 8000322:	f004 fb43 	bl	80049ac <strtok>
 8000326:	66f8      	str	r0, [r7, #108]	; 0x6c
			        while (token != NULL) {
 8000328:	e00e      	b.n	8000348 <HAL_UART_RxCpltCallback+0x54>
			            args[i++] = token;                 //Sammeln der gespaltenen String
 800032a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	677a      	str	r2, [r7, #116]	; 0x74
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000336:	4413      	add	r3, r2
 8000338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800033a:	f843 2c6c 	str.w	r2, [r3, #-108]
			            token = strtok(NULL, " \t\n");
 800033e:	4960      	ldr	r1, [pc, #384]	; (80004c0 <HAL_UART_RxCpltCallback+0x1cc>)
 8000340:	2000      	movs	r0, #0
 8000342:	f004 fb33 	bl	80049ac <strtok>
 8000346:	66f8      	str	r0, [r7, #108]	; 0x6c
			        while (token != NULL) {
 8000348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1ed      	bne.n	800032a <HAL_UART_RxCpltCallback+0x36>
			        }
			        //to print the array
			        for (j = 0; j < i; j++) {
 800034e:	2300      	movs	r3, #0
 8000350:	673b      	str	r3, [r7, #112]	; 0x70
 8000352:	e00d      	b.n	8000370 <HAL_UART_RxCpltCallback+0x7c>
			            printf("%s\r\n", args[j]);
 8000354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800035c:	4413      	add	r3, r2
 800035e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000362:	4619      	mov	r1, r3
 8000364:	4858      	ldr	r0, [pc, #352]	; (80004c8 <HAL_UART_RxCpltCallback+0x1d4>)
 8000366:	f004 fa93 	bl	8004890 <iprintf>
			        for (j = 0; j < i; j++) {
 800036a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800036c:	3301      	adds	r3, #1
 800036e:	673b      	str	r3, [r7, #112]	; 0x70
 8000370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000374:	429a      	cmp	r2, r3
 8000376:	dbed      	blt.n	8000354 <HAL_UART_RxCpltCallback+0x60>
			        }

			        /*  Konvertierung von string in das Hex-Format  */

			 int  hexbase0=(int) strtol (args[0],NULL,16);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2210      	movs	r2, #16
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f004 fbf4 	bl	8004b6c <strtol>
 8000384:	66b8      	str	r0, [r7, #104]	; 0x68
			 int  hexbase1=(int) strtol (args[1],NULL,16);
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	2210      	movs	r2, #16
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f004 fbed 	bl	8004b6c <strtol>
 8000392:	6678      	str	r0, [r7, #100]	; 0x64
			 int  hexbase2=(int) strtol (args[2],NULL,16);
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2210      	movs	r2, #16
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f004 fbe6 	bl	8004b6c <strtol>
 80003a0:	6638      	str	r0, [r7, #96]	; 0x60
			 int  hexbase3=(int) strtol (args[3],NULL,16);
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	2210      	movs	r2, #16
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f004 fbdf 	bl	8004b6c <strtol>
 80003ae:	65f8      	str	r0, [r7, #92]	; 0x5c
			 int  hexbase4=(int) strtol (args[4],NULL,16);
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	2210      	movs	r2, #16
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 fbd8 	bl	8004b6c <strtol>
 80003bc:	65b8      	str	r0, [r7, #88]	; 0x58
			 int  hexbase5=(int) strtol (args[5],NULL,16);
 80003be:	6a3b      	ldr	r3, [r7, #32]
 80003c0:	2210      	movs	r2, #16
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f004 fbd1 	bl	8004b6c <strtol>
 80003ca:	6578      	str	r0, [r7, #84]	; 0x54
			 int  hexbase6=(int) strtol (args[6],NULL,16);
 80003cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ce:	2210      	movs	r2, #16
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f004 fbca 	bl	8004b6c <strtol>
 80003d8:	6538      	str	r0, [r7, #80]	; 0x50
			 int  hexbase7=(int) strtol (args[7],NULL,16);
 80003da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003dc:	2210      	movs	r2, #16
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f004 fbc3 	bl	8004b6c <strtol>
 80003e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			 int  hexbase8=(int) strtol (args[8],NULL,16);
 80003e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ea:	2210      	movs	r2, #16
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f004 fbbc 	bl	8004b6c <strtol>
 80003f4:	64b8      	str	r0, [r7, #72]	; 0x48


			 /*Übertragung der Hex-Werte */

			 TxData[0] = hexbase1;
 80003f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 80003fc:	701a      	strb	r2, [r3, #0]
			 TxData[1] = hexbase2;
 80003fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b32      	ldr	r3, [pc, #200]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 8000404:	705a      	strb	r2, [r3, #1]
			 TxData[2] = hexbase3;
 8000406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4b30      	ldr	r3, [pc, #192]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 800040c:	709a      	strb	r2, [r3, #2]
			 TxData[3] = hexbase4 ;
 800040e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 8000414:	70da      	strb	r2, [r3, #3]
			 TxData[4] = hexbase5;
 8000416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 800041c:	711a      	strb	r2, [r3, #4]
			 TxData[5] = hexbase6;
 800041e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 8000424:	715a      	strb	r2, [r3, #5]
			 TxData[6] = hexbase7;
 8000426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 800042c:	719a      	strb	r2, [r3, #6]
			 TxData[7] = hexbase8;
 800042e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 8000434:	71da      	strb	r2, [r3, #7]

			 TxHeader.IDE = CAN_ID_STD;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
			 TxHeader.StdId = hexbase0;
 800043c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800043e:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000440:	6013      	str	r3, [r2, #0]
			 TxHeader.RTR = CAN_RTR_DATA;
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
			 TxHeader.DLC = 8;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <HAL_UART_RxCpltCallback+0x1dc>)
 800044a:	2208      	movs	r2, #8
 800044c:	611a      	str	r2, [r3, #16]

			 //Übertragung der CAN Nachtricht

              if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, (uint8_t*)TxData, &TxMailbox) != HAL_OK)
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000450:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <HAL_UART_RxCpltCallback+0x1d8>)
 8000452:	491f      	ldr	r1, [pc, #124]	; (80004d0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000454:	4820      	ldr	r0, [pc, #128]	; (80004d8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000456:	f000 fed0 	bl	80011fa <HAL_CAN_AddTxMessage>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <HAL_UART_RxCpltCallback+0x170>
						 {
							 Error_Handler ();
 8000460:	f000 fa78 	bl	8000954 <Error_Handler>
						 }

             //HAL_UART_Transmit(huart,data_buffer,count,HAL_MAX_DELAY);
			 data_buffer[count++]='\r';
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	491c      	ldr	r1, [pc, #112]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 800046c:	600a      	str	r2, [r1, #0]
 800046e:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <HAL_UART_RxCpltCallback+0x1d0>)
 8000470:	210d      	movs	r1, #13
 8000472:	54d1      	strb	r1, [r2, r3]

			 for(count=10; count>0; count--)                        //buffer leer machen
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 8000476:	220a      	movs	r2, #10
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	e009      	b.n	8000490 <HAL_UART_RxCpltCallback+0x19c>
			  {
                 data_buffer[count]=0;
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <HAL_UART_RxCpltCallback+0x1d0>)
 8000482:	2100      	movs	r1, #0
 8000484:	54d1      	strb	r1, [r2, r3]
			 for(count=10; count>0; count--)                        //buffer leer machen
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 800048e:	6013      	str	r3, [r2, #0]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f1      	bne.n	800047c <HAL_UART_RxCpltCallback+0x188>
		 else
		 {
			 data_buffer[count++] = recvd_data;
		 }

}
 8000498:	e008      	b.n	80004ac <HAL_UART_RxCpltCallback+0x1b8>
			 data_buffer[count++] = recvd_data;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	490e      	ldr	r1, [pc, #56]	; (80004dc <HAL_UART_RxCpltCallback+0x1e8>)
 80004a2:	600a      	str	r2, [r1, #0]
 80004a4:	4a03      	ldr	r2, [pc, #12]	; (80004b4 <HAL_UART_RxCpltCallback+0x1c0>)
 80004a6:	7811      	ldrb	r1, [r2, #0]
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <HAL_UART_RxCpltCallback+0x1d0>)
 80004aa:	54d1      	strb	r1, [r2, r3]
}
 80004ac:	bf00      	nop
 80004ae:	3778      	adds	r7, #120	; 0x78
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000b4 	.word	0x200000b4
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	20000094 	.word	0x20000094
 80004c0:	08005b40 	.word	0x08005b40
 80004c4:	20000220 	.word	0x20000220
 80004c8:	08005b44 	.word	0x08005b44
 80004cc:	2000010c 	.word	0x2000010c
 80004d0:	200001b0 	.word	0x200001b0
 80004d4:	20000120 	.word	0x20000120
 80004d8:	200000b8 	.word	0x200000b8
 80004dc:	20000090 	.word	0x20000090

080004e0 <SystemClock_Config>:


/* Systemclock Konfigurationen */

void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0a6      	sub	sp, #152	; 0x98
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ea:	2228      	movs	r2, #40	; 0x28
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 f9c6 	bl	8004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2258      	movs	r2, #88	; 0x58
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 f9b8 	bl	8004880 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	2310      	movs	r3, #16
 800051a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800052c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fdc8 	bl	80020d4 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800054a:	f000 fa03 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	2302      	movs	r3, #2
 8000554:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000564:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000568:	2102      	movs	r1, #2
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fcc8 	bl	8002f00 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000576:	f000 f9ed 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057a:	2302      	movs	r3, #2
 800057c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fef1 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000590:	f000 f9e0 	bl	8000954 <Error_Handler>
  }
}
 8000594:	bf00      	nop
 8000596:	3798      	adds	r7, #152	; 0x98
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <MX_CAN_Init>:
  * @retval None
  */

 /*CAN Initialisierung */
static void MX_CAN_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005a0:	4b46      	ldr	r3, [pc, #280]	; (80006bc <MX_CAN_Init+0x120>)
 80005a2:	4a47      	ldr	r2, [pc, #284]	; (80006c0 <MX_CAN_Init+0x124>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <MX_CAN_Init+0x120>)
 80005a8:	2210      	movs	r2, #16
 80005aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <MX_CAN_Init+0x120>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b42      	ldr	r3, [pc, #264]	; (80006bc <MX_CAN_Init+0x120>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80005b8:	4b40      	ldr	r3, [pc, #256]	; (80006bc <MX_CAN_Init+0x120>)
 80005ba:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80005be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80005c0:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <MX_CAN_Init+0x120>)
 80005c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <MX_CAN_Init+0x120>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <MX_CAN_Init+0x120>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005d4:	4b39      	ldr	r3, [pc, #228]	; (80006bc <MX_CAN_Init+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <MX_CAN_Init+0x120>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b36      	ldr	r3, [pc, #216]	; (80006bc <MX_CAN_Init+0x120>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_CAN_Init+0x120>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005ec:	4833      	ldr	r0, [pc, #204]	; (80006bc <MX_CAN_Init+0x120>)
 80005ee:	f000 fbfb 	bl	8000de8 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 f9ac 	bl	8000954 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */

// Filter bank 1  Konfigurationen


  sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_CAN_Init+0x128>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_CAN_Init+0x128>)
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  sFilterConfig1.FilterBank = 1;
 8000608:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <MX_CAN_Init+0x128>)
 800060a:	2201      	movs	r2, #1
 800060c:	615a      	str	r2, [r3, #20]
  sFilterConfig1.FilterIdHigh=0x200<<5;
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_CAN_Init+0x128>)
 8000610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000614:	601a      	str	r2, [r3, #0]
  sFilterConfig1.FilterMaskIdHigh=0x300<<5;
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_CAN_Init+0x128>)
 8000618:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800061c:	609a      	str	r2, [r3, #8]
  sFilterConfig1.FilterIdLow = 0x0000;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_CAN_Init+0x128>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  sFilterConfig1.FilterMaskIdLow = 0x0000;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_CAN_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_CAN_Init+0x128>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  sFilterConfig1.FilterActivation = ENABLE;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_CAN_Init+0x128>)
 8000632:	2201      	movs	r2, #1
 8000634:	621a      	str	r2, [r3, #32]

  //Filter bank 2   Konfigurationen

    sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
    sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_CAN_Init+0x12c>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
    sFilterConfig2.FilterBank = 2;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000644:	2202      	movs	r2, #2
 8000646:	615a      	str	r2, [r3, #20]
    sFilterConfig2.FilterIdHigh=0x80<<5;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_CAN_Init+0x12c>)
 800064a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064e:	601a      	str	r2, [r3, #0]
    sFilterConfig2.FilterMaskIdHigh=0xff<<5;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000652:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 8000656:	609a      	str	r2, [r3, #8]
    sFilterConfig2.FilterIdLow = 0x0000;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_CAN_Init+0x12c>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
    sFilterConfig2.FilterMaskIdLow = 0x0000;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
    sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
    sFilterConfig2.FilterActivation = ENABLE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_CAN_Init+0x12c>)
 800066c:	2201      	movs	r2, #1
 800066e:	621a      	str	r2, [r3, #32]



if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)		// Enable FIFO0 data interrupt reception
 8000670:	2102      	movs	r1, #2
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <MX_CAN_Init+0x120>)
 8000674:	f000 ffae 	bl	80015d4 <HAL_CAN_ActivateNotification>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_CAN_Init+0xe6>
          	{
          		Error_Handler();
 800067e:	f000 f969 	bl	8000954 <Error_Handler>
          	}

      if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig1) != HAL_OK)        //Filter bank 1 Initialisierung
 8000682:	4910      	ldr	r1, [pc, #64]	; (80006c4 <MX_CAN_Init+0x128>)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_CAN_Init+0x120>)
 8000686:	f000 fcaa 	bl	8000fde <HAL_CAN_ConfigFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CAN_Init+0xf8>
        {
          Error_Handler();
 8000690:	f000 f960 	bl	8000954 <Error_Handler>
        }

      if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig2) != HAL_OK)      //Filter bank 2 Initialisierung
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <MX_CAN_Init+0x12c>)
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_CAN_Init+0x120>)
 8000698:	f000 fca1 	bl	8000fde <HAL_CAN_ConfigFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_CAN_Init+0x10a>
             {
               Error_Handler();
 80006a2:	f000 f957 	bl	8000954 <Error_Handler>
             }
    /* USER CODE BEGIN CAN_Init 2 */



      	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_CAN_Init+0x120>)
 80006a8:	f000 fd63 	bl	8001172 <HAL_CAN_Start>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_CAN_Init+0x11a>
      	     	{
      	     		Error_Handler();
 80006b2:	f000 f94f 	bl	8000954 <Error_Handler>
      	     	}

  /* USER CODE END CAN_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	40006400 	.word	0x40006400
 80006c4:	200000e0 	.word	0x200000e0
 80006c8:	200001f8 	.word	0x200001f8

080006cc <MX_NVIC_Init>:
  * @param None
  * @retval None
  */
/* Interrupt konfiguration */
static void MX_NVIC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0


	  /* EXTI interrupt init*/
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f001 faae 	bl	8001c36 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006da:	2028      	movs	r0, #40	; 0x28
 80006dc:	f001 fac7 	bl	8001c6e <HAL_NVIC_EnableIRQ>
   /*CAN1_RX0_IRQn interrupt configuration*/
   HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2014      	movs	r0, #20
 80006e6:	f001 faa6 	bl	8001c36 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006ea:	2014      	movs	r0, #20
 80006ec:	f001 fabf 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MX_USART2_UART_Init>:

}

/*USART2 Initialization Function*/
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART2_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_USART2_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000738:	f003 f836 	bl	80037a8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f907 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000012c 	.word	0x2000012c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_GPIO_Init+0xc4>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <MX_GPIO_Init+0xc4>)
 8000770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0xc4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0xc4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <MX_GPIO_Init+0xc4>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_GPIO_Init+0xc4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xc4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_GPIO_Init+0xc4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f001 fc67 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_GPIO_Init+0xc8>)
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_GPIO_Init+0xcc>)
 80007ec:	f001 fad0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f001 fac1 	bl	8001d90 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	10210000 	.word	0x10210000
 8000820:	48000800 	.word	0x48000800

08000824 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8000832:	f107 010c 	add.w	r1, r7, #12
 8000836:	230a      	movs	r3, #10
 8000838:	2201      	movs	r2, #1
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <__io_putchar+0x28>)
 800083c:	f003 f802 	bl	8003844 <HAL_UART_Transmit>
 return ch;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000012c 	.word	0x2000012c

08000850 <_write>:

int _write(int file,char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e009      	b.n	8000876 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	60ba      	str	r2, [r7, #8]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffda 	bl	8000824 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	429a      	cmp	r2, r3
 800087c:	dbf1      	blt.n	8000862 <_write+0x12>
 }
return len;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_CAN_RxFifo0MsgPendingCallback>:
/*Callback function für CAN empfang interrupt */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]


	//char msg[50];


	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxDaTa) != HAL_OK)
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000894:	2100      	movs	r1, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 fd8a 	bl	80013b0 <HAL_CAN_GetRxMessage>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80008a2:	f000 f857 	bl	8000954 <Error_Handler>
	}

	     uint16_t ID = RxHeader.StdId;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	81fb      	strh	r3, [r7, #14]

	    printf("ID in Hexadecimal :%x\r\n",ID);
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	4619      	mov	r1, r3
 80008b0:	481e      	ldr	r0, [pc, #120]	; (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80008b2:	f003 ffed 	bl	8004890 <iprintf>
	    printf("Message received in Hexadecimal :\r\n");
 80008b6:	481e      	ldr	r0, [pc, #120]	; (8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80008b8:	f004 f870 	bl	800499c <puts>
		printf("first   byte : %x\r\n",RxDaTa[0]);
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80008c4:	f003 ffe4 	bl	8004890 <iprintf>
		printf("second  byte : %x\r\n",RxDaTa[1]);
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	4619      	mov	r1, r3
 80008ce:	481a      	ldr	r0, [pc, #104]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008d0:	f003 ffde 	bl	8004890 <iprintf>
		printf("third   byte : %x\r\n",RxDaTa[2]);
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	4619      	mov	r1, r3
 80008da:	4818      	ldr	r0, [pc, #96]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80008dc:	f003 ffd8 	bl	8004890 <iprintf>
		printf("fourth  byte : %x\r\n",RxDaTa[3]);
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008e2:	78db      	ldrb	r3, [r3, #3]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80008e8:	f003 ffd2 	bl	8004890 <iprintf>
		printf("fifth   byte : %x\r\n",RxDaTa[4]);
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80008f4:	f003 ffcc 	bl	8004890 <iprintf>
		printf("sixth   byte : %x\r\n",RxDaTa[5]);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008fa:	795b      	ldrb	r3, [r3, #5]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000900:	f003 ffc6 	bl	8004890 <iprintf>
		printf("seventh byte : %x\r\n",RxDaTa[6]);
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	4619      	mov	r1, r3
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800090c:	f003 ffc0 	bl	8004890 <iprintf>
		printf("eighth  byte : %x\r\n",RxDaTa[7]);
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000912:	79db      	ldrb	r3, [r3, #7]
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000918:	f003 ffba 	bl	8004890 <iprintf>
		//printf("Message received in Binary :\r\n");

		//Hextobin(hex_str);

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000124 	.word	0x20000124
 8000928:	200001c8 	.word	0x200001c8
 800092c:	08005b4c 	.word	0x08005b4c
 8000930:	08005b64 	.word	0x08005b64
 8000934:	08005b88 	.word	0x08005b88
 8000938:	08005b9c 	.word	0x08005b9c
 800093c:	08005bb0 	.word	0x08005bb0
 8000940:	08005bc4 	.word	0x08005bc4
 8000944:	08005bd8 	.word	0x08005bd8
 8000948:	08005bec 	.word	0x08005bec
 800094c:	08005c00 	.word	0x08005c00
 8000950:	08005c14 	.word	0x08005c14

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f001 f942 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <HAL_CAN_MspInit+0x90>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d131      	bne.n	8000a2e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_CAN_MspInit+0x94>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a0c:	2309      	movs	r3, #9
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f001 f9b9 	bl	8001d90 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2014      	movs	r0, #20
 8000a24:	f001 f907 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000a28:	2014      	movs	r0, #20
 8000a2a:	f001 f920 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40006400 	.word	0x40006400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x8c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d130      	bne.n	8000ac4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 f96e 	bl	8001d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2026      	movs	r0, #38	; 0x26
 8000aba:	f001 f8bc 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abe:	2026      	movs	r0, #38	; 0x26
 8000ac0:	f001 f8d5 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f942 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000b2e:	f000 fd77 	bl	8001620 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000b8 	.word	0x200000b8

08000b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	f002 ff51 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000012c 	.word	0x2000012c

08000b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_kill>:

int _kill(int pid, int sig)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b6a:	f003 fe5f 	bl	800482c <__errno>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2216      	movs	r2, #22
 8000b72:	601a      	str	r2, [r3, #0]
	return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_exit>:

void _exit (int status)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffe7 	bl	8000b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b92:	e7fe      	b.n	8000b92 <_exit+0x12>

08000b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
	}

return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f003 fde0 	bl	800482c <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20010000 	.word	0x20010000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000098 	.word	0x20000098
 8000ca0:	20000258 	.word	0x20000258

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cf2:	f7ff ffd7 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fd9f 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fac9 	bl	8000290 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d0c:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8000d10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d14:	20000254 	.word	0x20000254

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x28>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 ff77 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe12 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 ff8f 	bl	8001c8a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 ff57 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000008 	.word	0x20000008

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000240 	.word	0x20000240

08000dd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000240 	.word	0x20000240

08000de8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e0ed      	b.n	8000fd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fdce 	bl	80009a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0202 	bic.w	r2, r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e1c:	f7ff ffd8 	bl	8000dd0 <HAL_GetTick>
 8000e20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e22:	e012      	b.n	8000e4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e24:	f7ff ffd4 	bl	8000dd0 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b0a      	cmp	r3, #10
 8000e30:	d90b      	bls.n	8000e4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2205      	movs	r2, #5
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0c5      	b.n	8000fd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e5      	bne.n	8000e24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e68:	f7ff ffb2 	bl	8000dd0 <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6e:	e012      	b.n	8000e96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e70:	f7ff ffae 	bl	8000dd0 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	d90b      	bls.n	8000e96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e09f      	b.n	8000fd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0e5      	beq.n	8000e70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7e1b      	ldrb	r3, [r3, #24]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7e5b      	ldrb	r3, [r3, #25]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7e9b      	ldrb	r3, [r3, #26]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d108      	bne.n	8000f12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0220 	orr.w	r2, r2, #32
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0220 	bic.w	r2, r2, #32
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7edb      	ldrb	r3, [r3, #27]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0210 	bic.w	r2, r2, #16
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e007      	b.n	8000f4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0210 	orr.w	r2, r2, #16
 8000f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7f1b      	ldrb	r3, [r3, #28]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d108      	bne.n	8000f66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0208 	orr.w	r2, r2, #8
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e007      	b.n	8000f76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0208 	bic.w	r2, r2, #8
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7f5b      	ldrb	r3, [r3, #29]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0204 	orr.w	r2, r2, #4
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0204 	bic.w	r2, r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	ea42 0103 	orr.w	r1, r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d003      	beq.n	8001004 <HAL_CAN_ConfigFilter+0x26>
 8000ffc:	7cfb      	ldrb	r3, [r7, #19]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	f040 80aa 	bne.w	8001158 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2201      	movs	r2, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d123      	bne.n	8001086 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001060:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3248      	adds	r2, #72	; 0x48
 8001066:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800107c:	6979      	ldr	r1, [r7, #20]
 800107e:	3348      	adds	r3, #72	; 0x48
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d122      	bne.n	80010d4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	431a      	orrs	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3248      	adds	r2, #72	; 0x48
 80010b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ca:	6979      	ldr	r1, [r7, #20]
 80010cc:	3348      	adds	r3, #72	; 0x48
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010ee:	e007      	b.n	8001100 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800111a:	e007      	b.n	800112c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800114a:	f023 0201 	bic.w	r2, r3, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e006      	b.n	8001166 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
  }
}
 8001166:	4618      	mov	r0, r3
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12e      	bne.n	80011e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800119e:	f7ff fe17 	bl	8000dd0 <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011a4:	e012      	b.n	80011cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a6:	f7ff fe13 	bl	8000dd0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d90b      	bls.n	80011cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e012      	b.n	80011f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1e5      	bne.n	80011a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e006      	b.n	80011f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b089      	sub	sp, #36	; 0x24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d003      	beq.n	8001226 <HAL_CAN_AddTxMessage+0x2c>
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	2b02      	cmp	r3, #2
 8001222:	f040 80b8 	bne.w	8001396 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10a      	bne.n	8001246 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001236:	2b00      	cmp	r3, #0
 8001238:	d105      	bne.n	8001246 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80a0 	beq.w	8001386 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	0e1b      	lsrs	r3, r3, #24
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d907      	bls.n	8001266 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e09e      	b.n	80013a4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	6809      	ldr	r1, [r1, #0]
 8001286:	431a      	orrs	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3318      	adds	r3, #24
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	440b      	add	r3, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00f      	b.n	80012b4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800129e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3318      	adds	r3, #24
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3318      	adds	r3, #24
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	440b      	add	r3, r1
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	7d1b      	ldrb	r3, [r3, #20]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d111      	bne.n	80012f4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3318      	adds	r3, #24
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	3304      	adds	r3, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	3304      	adds	r3, #4
 80012f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3307      	adds	r3, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	061a      	lsls	r2, r3, #24
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3306      	adds	r3, #6
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3305      	adds	r3, #5
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4313      	orrs	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	3204      	adds	r2, #4
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	4610      	mov	r0, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6811      	ldr	r1, [r2, #0]
 800131c:	ea43 0200 	orr.w	r2, r3, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	440b      	add	r3, r1
 8001326:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800132a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3303      	adds	r3, #3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	061a      	lsls	r2, r3, #24
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3302      	adds	r3, #2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4313      	orrs	r3, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	4610      	mov	r0, r2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	ea43 0200 	orr.w	r2, r3, r0
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001360:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3318      	adds	r3, #24
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	6811      	ldr	r1, [r2, #0]
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3318      	adds	r3, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	440b      	add	r3, r1
 8001380:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e00e      	b.n	80013a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e006      	b.n	80013a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d003      	beq.n	80013d4 <HAL_CAN_GetRxMessage+0x24>
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	f040 80f3 	bne.w	80015ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d116      	bne.n	8001416 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0e7      	b.n	80015c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0d8      	b.n	80015c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	331b      	adds	r3, #27
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0204 	and.w	r2, r3, #4
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10c      	bne.n	800144e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	331b      	adds	r3, #27
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0d5b      	lsrs	r3, r3, #21
 8001444:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e00b      	b.n	8001466 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	331b      	adds	r3, #27
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	331b      	adds	r3, #27
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0202 	and.w	r2, r3, #2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	331b      	adds	r3, #27
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	3304      	adds	r3, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 020f 	and.w	r2, r3, #15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	331b      	adds	r3, #27
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	3304      	adds	r3, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	331b      	adds	r3, #27
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0a1a      	lsrs	r2, r3, #8
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0c1a      	lsrs	r2, r3, #16
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3302      	adds	r3, #2
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0e1a      	lsrs	r2, r3, #24
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	3303      	adds	r3, #3
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3304      	adds	r3, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0a1a      	lsrs	r2, r3, #8
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3305      	adds	r3, #5
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0c1a      	lsrs	r2, r3, #16
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	3306      	adds	r3, #6
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0e1a      	lsrs	r2, r3, #24
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3307      	adds	r3, #7
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	e007      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e006      	b.n	80015c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d002      	beq.n	80015f2 <HAL_CAN_ActivateNotification+0x1e>
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d109      	bne.n	8001606 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6959      	ldr	r1, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d07c      	beq.n	8001760 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f983 	bl	800198e <HAL_CAN_TxMailbox0CompleteCallback>
 8001688:	e016      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	e00c      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	e002      	b.n	80016b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f989 	bl	80019ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d024      	beq.n	800170c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f963 	bl	80019a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80016dc:	e016      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
 80016f0:	e00c      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	e002      	b.n	800170c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f969 	bl	80019de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d024      	beq.n	8001760 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f943 	bl	80019b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001730:	e016      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	e00c      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e002      	b.n	8001760 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f949 	bl	80019f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00c      	beq.n	8001784 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2208      	movs	r2, #8
 800179e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f930 	bl	8001a06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff f862 	bl	8000888 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2208      	movs	r2, #8
 8001802:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f912 	bl	8001a2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8f9 	bl	8001a1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8fc 	bl	8001a42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2208      	movs	r2, #8
 8001864:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f8f5 	bl	8001a56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d07b      	beq.n	800196e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d072      	beq.n	8001966 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d043      	beq.n	8001966 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d03e      	beq.n	8001966 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ee:	2b60      	cmp	r3, #96	; 0x60
 80018f0:	d02b      	beq.n	800194a <HAL_CAN_IRQHandler+0x32a>
 80018f2:	2b60      	cmp	r3, #96	; 0x60
 80018f4:	d82e      	bhi.n	8001954 <HAL_CAN_IRQHandler+0x334>
 80018f6:	2b50      	cmp	r3, #80	; 0x50
 80018f8:	d022      	beq.n	8001940 <HAL_CAN_IRQHandler+0x320>
 80018fa:	2b50      	cmp	r3, #80	; 0x50
 80018fc:	d82a      	bhi.n	8001954 <HAL_CAN_IRQHandler+0x334>
 80018fe:	2b40      	cmp	r3, #64	; 0x40
 8001900:	d019      	beq.n	8001936 <HAL_CAN_IRQHandler+0x316>
 8001902:	2b40      	cmp	r3, #64	; 0x40
 8001904:	d826      	bhi.n	8001954 <HAL_CAN_IRQHandler+0x334>
 8001906:	2b30      	cmp	r3, #48	; 0x30
 8001908:	d010      	beq.n	800192c <HAL_CAN_IRQHandler+0x30c>
 800190a:	2b30      	cmp	r3, #48	; 0x30
 800190c:	d822      	bhi.n	8001954 <HAL_CAN_IRQHandler+0x334>
 800190e:	2b10      	cmp	r3, #16
 8001910:	d002      	beq.n	8001918 <HAL_CAN_IRQHandler+0x2f8>
 8001912:	2b20      	cmp	r3, #32
 8001914:	d005      	beq.n	8001922 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001916:	e01d      	b.n	8001954 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001920:	e019      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192a:	e014      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f043 0320 	orr.w	r3, r3, #32
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001934:	e00f      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193e:	e00a      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001948:	e005      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001952:	e000      	b.n	8001956 <HAL_CAN_IRQHandler+0x336>
            break;
 8001954:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001964:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2204      	movs	r2, #4
 800196c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f872 	bl	8001a6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff29 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff3e 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff31 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa2 	bl	8001bdc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e020      	b.n	8001d08 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 020e 	bic.w	r2, r2, #14
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d005      	beq.n	8001d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e027      	b.n	8001d86 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 020e 	bic.w	r2, r2, #14
 8001d44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f202 	lsl.w	r2, r1, r2
 8001d64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
    } 
  }
  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e160      	b.n	8002062 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8152 	beq.w	800205c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0xea>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80ac 	beq.w	800205c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f1c:	4a59      	ldr	r2, [pc, #356]	; (8002084 <HAL_GPIO_Init+0x2f4>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f46:	d025      	beq.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a4f      	ldr	r2, [pc, #316]	; (8002088 <HAL_GPIO_Init+0x2f8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01f      	beq.n	8001f90 <HAL_GPIO_Init+0x200>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4e      	ldr	r2, [pc, #312]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x1fc>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4d      	ldr	r2, [pc, #308]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1f8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_GPIO_Init+0x304>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1f4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <HAL_GPIO_Init+0x308>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1f0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_GPIO_Init+0x30c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1ec>
 8001f78:	2306      	movs	r3, #6
 8001f7a:	e00c      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	e00a      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f80:	2305      	movs	r3, #5
 8001f82:	e008      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e006      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e004      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_GPIO_Init+0x206>
 8001f94:	2300      	movs	r3, #0
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	f002 0203 	and.w	r2, r2, #3
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fa6:	4937      	ldr	r1, [pc, #220]	; (8002084 <HAL_GPIO_Init+0x2f4>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fd8:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002002:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_GPIO_Init+0x310>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_GPIO_Init+0x310>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f ae97 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000
 8002088:	48000400 	.word	0x48000400
 800208c:	48000800 	.word	0x48000800
 8002090:	48000c00 	.word	0x48000c00
 8002094:	48001000 	.word	0x48001000
 8002098:	48001400 	.word	0x48001400
 800209c:	48001800 	.word	0x48001800
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80020da:	af00      	add	r7, sp, #0
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f000 bf01 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8160 	beq.w	80023be <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fe:	4bae      	ldr	r3, [pc, #696]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210a:	4bab      	ldr	r3, [pc, #684]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d159      	bne.n	80021ca <HAL_RCC_OscConfig+0xf6>
 8002116:	4ba8      	ldr	r3, [pc, #672]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002122:	d152      	bne.n	80021ca <HAL_RCC_OscConfig+0xf6>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002138:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0x82>
 8002150:	4b99      	ldr	r3, [pc, #612]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0xae>
 8002156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002172:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800217e:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002186:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800218a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002196:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8102 	beq.w	80023bc <HAL_RCC_OscConfig+0x2e8>
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 80fc 	bne.w	80023bc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f000 be93 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x110>
 80021d6:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e030      	b.n	8002246 <HAL_RCC_OscConfig+0x172>
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x134>
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a71      	ldr	r2, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01e      	b.n	8002246 <HAL_RCC_OscConfig+0x172>
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x15a>
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a67      	ldr	r2, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 800221a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e00b      	b.n	8002246 <HAL_RCC_OscConfig+0x172>
 800222e:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5e      	ldr	r2, [pc, #376]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d059      	beq.n	8002304 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fdbe 	bl	8000dd0 <HAL_GetTick>
 8002254:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225a:	f7fe fdb9 	bl	8000dd0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d902      	bls.n	8002270 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	f000 be40 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002274:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002284:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x1ce>
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x1fa>
 80022a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80022b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022d2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80022d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80022e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ab      	beq.n	800225a <HAL_RCC_OscConfig+0x186>
 8002302:	e05c      	b.n	80023be <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fd64 	bl	8000dd0 <HAL_GetTick>
 8002308:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230e:	f7fe fd5f 	bl	8000dd0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d902      	bls.n	8002324 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	f000 bde6 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002328:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002338:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_RCC_OscConfig+0x282>
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x2ae>
 8002356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002372:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_RCC_OscConfig+0x2e4>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002386:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800238a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002396:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ab      	bne.n	800230e <HAL_RCC_OscConfig+0x23a>
 80023b6:	e002      	b.n	80023be <HAL_RCC_OscConfig+0x2ea>
 80023b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8170 	beq.w	80026ae <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023ce:	4bd0      	ldr	r3, [pc, #832]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023da:	4bcd      	ldr	r3, [pc, #820]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d16d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3ee>
 80023e6:	4bca      	ldr	r3, [pc, #808]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f2:	d166      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3ee>
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002406:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <HAL_RCC_OscConfig+0x350>
 800241e:	4bbc      	ldr	r3, [pc, #752]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	e013      	b.n	800244c <HAL_RCC_OscConfig+0x378>
 8002424:	2302      	movs	r3, #2
 8002426:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800243c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002448:	4bb1      	ldr	r3, [pc, #708]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	2202      	movs	r2, #2
 800244e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002452:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002456:	fa92 f2a2 	rbit	r2, r2
 800245a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800245e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_RCC_OscConfig+0x3ba>
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d002      	beq.n	800248e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f000 bd31 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4ba0      	ldr	r3, [pc, #640]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	21f8      	movs	r1, #248	; 0xf8
 800249e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80024a6:	fa91 f1a1 	rbit	r1, r1
 80024aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80024ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024b2:	fab1 f181 	clz	r1, r1
 80024b6:	b2c9      	uxtb	r1, r1
 80024b8:	408b      	lsls	r3, r1
 80024ba:	4995      	ldr	r1, [pc, #596]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c0:	e0f5      	b.n	80026ae <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8085 	beq.w	80025d8 <HAL_RCC_OscConfig+0x504>
 80024ce:	2301      	movs	r3, #1
 80024d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80024e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc69 	bl	8000dd0 <HAL_GetTick>
 80024fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fc64 	bl	8000dd0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d902      	bls.n	800251a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	f000 bceb 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800252c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x476>
 8002544:	4b72      	ldr	r3, [pc, #456]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e013      	b.n	8002572 <HAL_RCC_OscConfig+0x49e>
 800254a:	2302      	movs	r3, #2
 800254c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002562:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800256e:	4b68      	ldr	r3, [pc, #416]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2202      	movs	r2, #2
 8002574:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002578:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002584:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f002 021f 	and.w	r2, r2, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0af      	beq.n	8002504 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	21f8      	movs	r1, #248	; 0xf8
 80025b4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80025bc:	fa91 f1a1 	rbit	r1, r1
 80025c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80025c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025c8:	fab1 f181 	clz	r1, r1
 80025cc:	b2c9      	uxtb	r1, r1
 80025ce:	408b      	lsls	r3, r1
 80025d0:	494f      	ldr	r1, [pc, #316]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
 80025d6:	e06a      	b.n	80026ae <HAL_RCC_OscConfig+0x5da>
 80025d8:	2301      	movs	r3, #1
 80025da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80025ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	461a      	mov	r2, r3
 8002600:	2300      	movs	r3, #0
 8002602:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe fbe4 	bl	8000dd0 <HAL_GetTick>
 8002608:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fbdf 	bl	8000dd0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	f000 bc66 	b.w	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002636:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0x580>
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e013      	b.n	800267c <HAL_RCC_OscConfig+0x5a8>
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002666:	2302      	movs	r3, #2
 8002668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800266c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_OscConfig+0x63c>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002682:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002686:	fa92 f2a2 	rbit	r2, r2
 800268a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800268e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1af      	bne.n	800260e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80da 	beq.w	8002872 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d069      	beq.n	800279c <HAL_RCC_OscConfig+0x6c8>
 80026c8:	2301      	movs	r3, #1
 80026ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80026da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x640>)
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	461a      	mov	r2, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fb6d 	bl	8000dd0 <HAL_GetTick>
 80026f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e00d      	b.n	8002718 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fb68 	bl	8000dd0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d905      	bls.n	8002718 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e3ef      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002710:	40021000 	.word	0x40021000
 8002714:	10908120 	.word	0x10908120
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800275a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	4ba4      	ldr	r3, [pc, #656]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002760:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002764:	2102      	movs	r1, #2
 8002766:	6019      	str	r1, [r3, #0]
 8002768:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f1a3 	rbit	r1, r3
 8002772:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002776:	6019      	str	r1, [r3, #0]
  return result;
 8002778:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0b0      	beq.n	80026fc <HAL_RCC_OscConfig+0x628>
 800279a:	e06a      	b.n	8002872 <HAL_RCC_OscConfig+0x79e>
 800279c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027b2:	601a      	str	r2, [r3, #0]
  return result;
 80027b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x920>)
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	461a      	mov	r2, r3
 80027ca:	2300      	movs	r3, #0
 80027cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe faff 	bl	8000dd0 <HAL_GetTick>
 80027d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	e009      	b.n	80027ec <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fafa 	bl	8000dd0 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e381      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 80027ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002832:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800283c:	2102      	movs	r1, #2
 800283e:	6019      	str	r1, [r3, #0]
 8002840:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f1a3 	rbit	r1, r3
 800284a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800284e:	6019      	str	r1, [r3, #0]
  return result;
 8002850:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1b2      	bne.n	80027d8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8157 	beq.w	8002b30 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289e:	61d3      	str	r3, [r2, #28]
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCC_OscConfig+0x924>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_RCC_OscConfig+0x924>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <HAL_RCC_OscConfig+0x924>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fa7d 	bl	8000dd0 <HAL_GetTick>
 80028d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	e009      	b.n	80028f0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fa78 	bl	8000dd0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e2ff      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x924>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x840>
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a39      	ldr	r2, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	e02f      	b.n	8002974 <HAL_RCC_OscConfig+0x8a0>
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x864>
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0x8a0>
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x888>
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x8a0>
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06a      	beq.n	8002a54 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe fa27 	bl	8000dd0 <HAL_GetTick>
 8002982:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fa22 	bl	8000dd0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e2a7      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 80029a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029bc:	2202      	movs	r2, #2
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029ce:	601a      	str	r2, [r3, #0]
  return result;
 80029d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x928>
 80029ea:	4b01      	ldr	r3, [pc, #4]	; (80029f0 <HAL_RCC_OscConfig+0x91c>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	e013      	b.n	8002a18 <HAL_RCC_OscConfig+0x944>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	10908120 	.word	0x10908120
 80029f8:	40007000 	.word	0x40007000
 80029fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4bc0      	ldr	r3, [pc, #768]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	fa92 f1a2 	rbit	r1, r2
 8002a2a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a2e:	6011      	str	r1, [r2, #0]
  return result;
 8002a30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d09a      	beq.n	8002988 <HAL_RCC_OscConfig+0x8b4>
 8002a52:	e063      	b.n	8002b1c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f9bc 	bl	8000dd0 <HAL_GetTick>
 8002a58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe f9b7 	bl	8000dd0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e23c      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002a76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a92:	2202      	movs	r2, #2
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002aa4:	601a      	str	r2, [r3, #0]
  return result;
 8002aa6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002aaa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d102      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x9f2>
 8002ac0:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	e00d      	b.n	8002ae2 <HAL_RCC_OscConfig+0xa0e>
 8002ac6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002aca:	2202      	movs	r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f2a3 	rbit	r2, r3
 8002ad8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4b8e      	ldr	r3, [pc, #568]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	fa92 f1a2 	rbit	r1, r2
 8002af4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002af8:	6011      	str	r1, [r2, #0]
  return result;
 8002afa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1a0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4a7b      	ldr	r2, [pc, #492]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 81d9 	beq.w	8002eee <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3c:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f000 81a6 	beq.w	8002e96 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	f040 811e 	bne.w	8002d92 <HAL_RCC_OscConfig+0xcbe>
 8002b56:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b6e:	601a      	str	r2, [r3, #0]
  return result;
 8002b70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	461a      	mov	r2, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f920 	bl	8000dd0 <HAL_GetTick>
 8002b90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	e009      	b.n	8002baa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe f91b 	bl	8000dd0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1a2      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002baa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fa93 f2a3 	rbit	r2, r3
 8002bbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <HAL_RCC_OscConfig+0xb10>
 8002bde:	4b4e      	ldr	r3, [pc, #312]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0xb48>
 8002be4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	fa92 f1a2 	rbit	r1, r2
 8002c30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c34:	6011      	str	r1, [r2, #0]
  return result;
 8002c36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d19e      	bne.n	8002b96 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f023 020f 	bic.w	r2, r3, #15
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	492c      	ldr	r1, [pc, #176]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a19      	ldr	r1, [r3, #32]
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ca6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f887 	bl	8000dd0 <HAL_GetTick>
 8002cc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc6:	e009      	b.n	8002cdc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f882 	bl	8000dd0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e109      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0xc48>
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <HAL_RCC_OscConfig+0xc44>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	e01e      	b.n	8002d54 <HAL_RCC_OscConfig+0xc80>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0xe28>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	fa92 f1a2 	rbit	r1, r2
 8002d68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d6c:	6011      	str	r1, [r2, #0]
  return result;
 8002d6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	fab2 f282 	clz	r2, r2
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f042 0220 	orr.w	r2, r2, #32
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f002 021f 	and.w	r2, r2, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d09b      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xbf4>
 8002d90:	e0ad      	b.n	8002eee <HAL_RCC_OscConfig+0xe1a>
 8002d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002daa:	601a      	str	r2, [r3, #0]
  return result;
 8002dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f802 	bl	8000dd0 <HAL_GetTick>
 8002dcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fd fffd 	bl	8000dd0 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e084      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
 8002de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dfe:	601a      	str	r2, [r3, #0]
  return result;
 8002e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0xd4c>
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_RCC_OscConfig+0xe28>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0xd84>
 8002e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 0320 	add.w	r3, r7, #32
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f107 031c 	add.w	r3, r7, #28
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f107 0318 	add.w	r3, r7, #24
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0xe28>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f107 0214 	add.w	r2, r7, #20
 8002e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	f107 0214 	add.w	r2, r7, #20
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fa92 f1a2 	rbit	r1, r2
 8002e6c:	f107 0210 	add.w	r2, r7, #16
 8002e70:	6011      	str	r1, [r2, #0]
  return result;
 8002e72:	f107 0210 	add.w	r2, r7, #16
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d19e      	bne.n	8002dd2 <HAL_RCC_OscConfig+0xcfe>
 8002e94:	e02b      	b.n	8002eee <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e025      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RCC_OscConfig+0xe28>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_OscConfig+0xe28>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002eb8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d111      	bne.n	8002eea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002eca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d108      	bne.n	8002eea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b09e      	sub	sp, #120	; 0x78
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e162      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b90      	ldr	r3, [pc, #576]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d910      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b8d      	ldr	r3, [pc, #564]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0207 	bic.w	r2, r3, #7
 8002f2e:	498b      	ldr	r1, [pc, #556]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e14a      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	497f      	ldr	r1, [pc, #508]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80dc 	beq.w	800312c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d13c      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xf6>
 8002f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d102      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xa6>
 8002fa0:	4b6f      	ldr	r3, [pc, #444]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	e00f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0xc6>
 8002fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002faa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fce:	fa92 f2a2 	rbit	r2, r2
 8002fd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fd6:	fab2 f282 	clz	r2, r2
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f042 0220 	orr.w	r2, r2, #32
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f002 021f 	and.w	r2, r2, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d17b      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0f3      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d13c      	bne.n	8003078 <HAL_RCC_ClockConfig+0x178>
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003002:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800300c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_RCC_ClockConfig+0x128>
 8003022:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e00f      	b.n	8003048 <HAL_RCC_ClockConfig+0x148>
 8003028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	647b      	str	r3, [r7, #68]	; 0x44
 8003036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303a:	643b      	str	r3, [r7, #64]	; 0x40
 800303c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800304c:	63ba      	str	r2, [r7, #56]	; 0x38
 800304e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003050:	fa92 f2a2 	rbit	r2, r2
 8003054:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003058:	fab2 f282 	clz	r2, r2
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	f042 0220 	orr.w	r2, r2, #32
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f002 021f 	and.w	r2, r2, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f202 	lsl.w	r2, r1, r2
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d13a      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b2      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
 8003078:	2302      	movs	r3, #2
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e00d      	b.n	80030bc <HAL_RCC_ClockConfig+0x1bc>
 80030a0:	2302      	movs	r3, #2
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	2302      	movs	r3, #2
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2202      	movs	r2, #2
 80030be:	61ba      	str	r2, [r7, #24]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	fa92 f2a2 	rbit	r2, r2
 80030c6:	617a      	str	r2, [r7, #20]
  return result;
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	fab2 f282 	clz	r2, r2
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f042 0220 	orr.w	r2, r2, #32
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f002 021f 	and.w	r2, r2, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e079      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	491a      	ldr	r1, [pc, #104]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030fc:	f7fd fe68 	bl	8000dd0 <HAL_GetTick>
 8003100:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fd fe64 	bl	8000dd0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e061      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_ClockConfig+0x260>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 020c 	and.w	r2, r3, #12
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1eb      	bne.n	8003104 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d214      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 0207 	bic.w	r2, r3, #7
 8003142:	4906      	ldr	r1, [pc, #24]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCC_ClockConfig+0x25c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e040      	b.n	80031de <HAL_RCC_ClockConfig+0x2de>
 800315c:	40022000 	.word	0x40022000
 8003160:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	491a      	ldr	r1, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x2e8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4912      	ldr	r1, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x2e8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031a2:	f000 f829 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4601      	mov	r1, r0
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_ClockConfig+0x2e8>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b0:	22f0      	movs	r2, #240	; 0xf0
 80031b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	fa92 f2a2 	rbit	r2, r2
 80031ba:	60fa      	str	r2, [r7, #12]
  return result;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	fab2 f282 	clz	r2, r2
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	40d3      	lsrs	r3, r2
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x2ec>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	fa21 f303 	lsr.w	r3, r1, r3
 80031ce:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_RCC_ClockConfig+0x2f0>)
 80031d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_RCC_ClockConfig+0x2f4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fdb6 	bl	8000d48 <HAL_InitTick>
  
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3778      	adds	r7, #120	; 0x78
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08005c28 	.word	0x08005c28
 80031f0:	20000004 	.word	0x20000004
 80031f4:	20000008 	.word	0x20000008

080031f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b08b      	sub	sp, #44	; 0x2c
 80031fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b04      	cmp	r3, #4
 8003220:	d002      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x30>
 8003222:	2b08      	cmp	r3, #8
 8003224:	d003      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x36>
 8003226:	e03f      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800322a:	623b      	str	r3, [r7, #32]
      break;
 800322c:	e03f      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003234:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003238:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	fa92 f2a2 	rbit	r2, r2
 8003240:	607a      	str	r2, [r7, #4]
  return result;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	40d3      	lsrs	r3, r2
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	220f      	movs	r2, #15
 800325c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	fa92 f2a2 	rbit	r2, r2
 8003264:	60fa      	str	r2, [r7, #12]
  return result;
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	40d3      	lsrs	r3, r2
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	e007      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fbb2 f2f3 	udiv	r2, r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	623b      	str	r3, [r7, #32]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	372c      	adds	r7, #44	; 0x2c
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40021000 	.word	0x40021000
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	08005c40 	.word	0x08005c40
 80032c8:	08005c50 	.word	0x08005c50

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032ea:	f7ff ffef 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ee:	4601      	mov	r1, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	fa92 f2a2 	rbit	r2, r2
 8003304:	603a      	str	r2, [r7, #0]
  return result;
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	40d3      	lsrs	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	08005c38 	.word	0x08005c38

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800332e:	f7ff ffcd 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003332:	4601      	mov	r1, r0
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800333c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003340:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	603a      	str	r2, [r7, #0]
  return result;
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	40d3      	lsrs	r3, r2
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08005c38 	.word	0x08005c38

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b092      	sub	sp, #72	; 0x48
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d4 	beq.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003390:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b45      	ldr	r3, [pc, #276]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a41      	ldr	r2, [pc, #260]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fcfd 	bl	8000dd0 <HAL_GetTick>
 80033d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fd fcf9 	bl	8000dd0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	; 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1d6      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8084 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003414:	429a      	cmp	r2, r3
 8003416:	d07c      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003418:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	461a      	mov	r2, r3
 8003442:	2301      	movs	r3, #1
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	461a      	mov	r2, r3
 8003466:	2300      	movs	r3, #0
 8003468:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04b      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fd fca9 	bl	8000dd0 <HAL_GetTick>
 800347e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd fca5 	bl	8000dd0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e180      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003498:	2302      	movs	r3, #2
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	61fb      	str	r3, [r7, #28]
  return result;
 80034b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d108      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034c6:	4b01      	ldr	r3, [pc, #4]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	e00d      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	10908100 	.word	0x10908100
 80034d8:	2302      	movs	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2202      	movs	r2, #2
 80034ea:	613a      	str	r2, [r7, #16]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	60fa      	str	r2, [r7, #12]
  return result;
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0b7      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4992      	ldr	r1, [pc, #584]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4a8d      	ldr	r2, [pc, #564]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f023 0203 	bic.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4985      	ldr	r1, [pc, #532]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003562:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	497e      	ldr	r1, [pc, #504]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003580:	4b79      	ldr	r3, [pc, #484]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4976      	ldr	r1, [pc, #472]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800359e:	4b72      	ldr	r3, [pc, #456]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f023 0210 	bic.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	496f      	ldr	r1, [pc, #444]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	4967      	ldr	r1, [pc, #412]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f023 0220 	bic.w	r2, r3, #32
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4960      	ldr	r1, [pc, #384]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f8:	4b5b      	ldr	r3, [pc, #364]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	4958      	ldr	r1, [pc, #352]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003616:	4b54      	ldr	r3, [pc, #336]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4951      	ldr	r1, [pc, #324]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003634:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4949      	ldr	r1, [pc, #292]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003652:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4942      	ldr	r1, [pc, #264]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003670:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	493a      	ldr	r1, [pc, #232]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	4933      	ldr	r1, [pc, #204]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	492b      	ldr	r1, [pc, #172]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4924      	ldr	r1, [pc, #144]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	491c      	ldr	r1, [pc, #112]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	4915      	ldr	r1, [pc, #84]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	490d      	ldr	r1, [pc, #52]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	4906      	ldr	r1, [pc, #24]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	490b      	ldr	r1, [pc, #44]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003776:	4313      	orrs	r3, r2
 8003778:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003794:	4313      	orrs	r3, r2
 8003796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3748      	adds	r7, #72	; 0x48
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e040      	b.n	800383c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd f938 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fb1e 	bl	8003e28 <UART_SetConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e022      	b.n	800383c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fce8 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fd6f 	bl	8004318 <UART_CheckIdleState>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003858:	2b20      	cmp	r3, #32
 800385a:	f040 8082 	bne.w	8003962 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_UART_Transmit+0x26>
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07a      	b.n	8003964 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_UART_Transmit+0x38>
 8003878:	2302      	movs	r3, #2
 800387a:	e073      	b.n	8003964 <HAL_UART_Transmit+0x120>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2221      	movs	r2, #33	; 0x21
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003892:	f7fd fa9d 	bl	8000dd0 <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d108      	bne.n	80038c4 <HAL_UART_Transmit+0x80>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e003      	b.n	80038cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038d4:	e02d      	b.n	8003932 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fd62 	bl	80043aa <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e039      	b.n	8003964 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003902:	b292      	uxth	r2, r2
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3302      	adds	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e008      	b.n	8003920 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b292      	uxth	r2, r2
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1cb      	bne.n	80038d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fd2e 	bl	80043aa <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e005      	b.n	8003964 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397e:	2b20      	cmp	r3, #32
 8003980:	d12c      	bne.n	80039dc <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Receive_IT+0x22>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e025      	b.n	80039de <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Receive_IT+0x34>
 800399c:	2302      	movs	r3, #2
 800399e:	e01e      	b.n	80039de <HAL_UART_Receive_IT+0x72>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039ca:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fd66 	bl	80044a4 <UART_Start_Receive_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	e000      	b.n	80039de <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 81cc 	beq.w	8003dce <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
      }
      return;
 8003a3e:	e1c6      	b.n	8003dce <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80e3 	beq.w	8003c0e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4ba5      	ldr	r3, [pc, #660]	; (8003cec <HAL_UART_IRQHandler+0x304>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80d8 	beq.w	8003c0e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_UART_IRQHandler+0xa2>
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xce>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xfa>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad8:	f043 0202 	orr.w	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_UART_IRQHandler+0x15e>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8140 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00c      	beq.n	8003b76 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d004      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d031      	beq.n	8003bfa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fd0c 	bl	80045b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d123      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d013      	beq.n	8003bea <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a4a      	ldr	r2, [pc, #296]	; (8003cf0 <HAL_UART_IRQHandler+0x308>)
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe f8a0 	bl	8001d14 <HAL_DMA_Abort_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00f      	b.n	8003c0a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f906 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e00b      	b.n	8003c0a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f902 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e007      	b.n	8003c0a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8fe 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c08:	e0e3      	b.n	8003dd2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0a:	bf00      	nop
    return;
 8003c0c:	e0e1      	b.n	8003dd2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	f040 80a7 	bne.w	8003d66 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80a1 	beq.w	8003d66 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 809b 	beq.w	8003d66 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2210      	movs	r2, #16
 8003c36:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d156      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80bf 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c5e:	893a      	ldrh	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f080 80b8 	bcs.w	8003dd6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	893a      	ldrh	r2, [r7, #8]
 8003c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d02a      	beq.n	8003cce <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c86:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0210 	bic.w	r2, r2, #16
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd ffea 	bl	8001ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f894 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ce8:	e075      	b.n	8003dd6 <HAL_UART_IRQHandler+0x3ee>
 8003cea:	bf00      	nop
 8003cec:	04000120 	.word	0x04000120
 8003cf0:	08004613 	.word	0x08004613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d060      	beq.n	8003dda <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d26:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0210 	bic.w	r2, r2, #16
 8003d58:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f856 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d64:	e039      	b.n	8003dda <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <HAL_UART_IRQHandler+0x3a4>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fd47 	bl	8004818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d8a:	e029      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
    }
    return;
 8003db0:	e015      	b.n	8003dde <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fc39 	bl	800463e <UART_EndTransmit_IT>
    return;
 8003dcc:	e008      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003dce:	bf00      	nop
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003dd2:	bf00      	nop
 8003dd4:	e004      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003dde:	bf00      	nop
  }

}
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4bab      	ldr	r3, [pc, #684]	; (8004100 <UART_SetConfig+0x2d8>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a99      	ldr	r2, [pc, #612]	; (8004104 <UART_SetConfig+0x2dc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d120      	bne.n	8003ee6 <UART_SetConfig+0xbe>
 8003ea4:	4b98      	ldr	r3, [pc, #608]	; (8004108 <UART_SetConfig+0x2e0>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d817      	bhi.n	8003ee0 <UART_SetConfig+0xb8>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x90>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed5 	.word	0x08003ed5
 8003ec0:	08003edb 	.word	0x08003edb
 8003ec4:	08003ecf 	.word	0x08003ecf
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e0b5      	b.n	800403a <UART_SetConfig+0x212>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e0b2      	b.n	800403a <UART_SetConfig+0x212>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e0af      	b.n	800403a <UART_SetConfig+0x212>
 8003eda:	2308      	movs	r3, #8
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e0ac      	b.n	800403a <UART_SetConfig+0x212>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e0a9      	b.n	800403a <UART_SetConfig+0x212>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a88      	ldr	r2, [pc, #544]	; (800410c <UART_SetConfig+0x2e4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d124      	bne.n	8003f3a <UART_SetConfig+0x112>
 8003ef0:	4b85      	ldr	r3, [pc, #532]	; (8004108 <UART_SetConfig+0x2e0>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003efc:	d011      	beq.n	8003f22 <UART_SetConfig+0xfa>
 8003efe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f02:	d817      	bhi.n	8003f34 <UART_SetConfig+0x10c>
 8003f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f08:	d011      	beq.n	8003f2e <UART_SetConfig+0x106>
 8003f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0e:	d811      	bhi.n	8003f34 <UART_SetConfig+0x10c>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <UART_SetConfig+0xf4>
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d006      	beq.n	8003f28 <UART_SetConfig+0x100>
 8003f1a:	e00b      	b.n	8003f34 <UART_SetConfig+0x10c>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e08b      	b.n	800403a <UART_SetConfig+0x212>
 8003f22:	2302      	movs	r3, #2
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e088      	b.n	800403a <UART_SetConfig+0x212>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e085      	b.n	800403a <UART_SetConfig+0x212>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e082      	b.n	800403a <UART_SetConfig+0x212>
 8003f34:	2310      	movs	r3, #16
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e07f      	b.n	800403a <UART_SetConfig+0x212>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a74      	ldr	r2, [pc, #464]	; (8004110 <UART_SetConfig+0x2e8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d124      	bne.n	8003f8e <UART_SetConfig+0x166>
 8003f44:	4b70      	ldr	r3, [pc, #448]	; (8004108 <UART_SetConfig+0x2e0>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f50:	d011      	beq.n	8003f76 <UART_SetConfig+0x14e>
 8003f52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f56:	d817      	bhi.n	8003f88 <UART_SetConfig+0x160>
 8003f58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f5c:	d011      	beq.n	8003f82 <UART_SetConfig+0x15a>
 8003f5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f62:	d811      	bhi.n	8003f88 <UART_SetConfig+0x160>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <UART_SetConfig+0x148>
 8003f68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f6c:	d006      	beq.n	8003f7c <UART_SetConfig+0x154>
 8003f6e:	e00b      	b.n	8003f88 <UART_SetConfig+0x160>
 8003f70:	2300      	movs	r3, #0
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e061      	b.n	800403a <UART_SetConfig+0x212>
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e05e      	b.n	800403a <UART_SetConfig+0x212>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e05b      	b.n	800403a <UART_SetConfig+0x212>
 8003f82:	2308      	movs	r3, #8
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e058      	b.n	800403a <UART_SetConfig+0x212>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e055      	b.n	800403a <UART_SetConfig+0x212>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a60      	ldr	r2, [pc, #384]	; (8004114 <UART_SetConfig+0x2ec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d124      	bne.n	8003fe2 <UART_SetConfig+0x1ba>
 8003f98:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <UART_SetConfig+0x2e0>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003fa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fa4:	d011      	beq.n	8003fca <UART_SetConfig+0x1a2>
 8003fa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003faa:	d817      	bhi.n	8003fdc <UART_SetConfig+0x1b4>
 8003fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb0:	d011      	beq.n	8003fd6 <UART_SetConfig+0x1ae>
 8003fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb6:	d811      	bhi.n	8003fdc <UART_SetConfig+0x1b4>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x19c>
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc0:	d006      	beq.n	8003fd0 <UART_SetConfig+0x1a8>
 8003fc2:	e00b      	b.n	8003fdc <UART_SetConfig+0x1b4>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e037      	b.n	800403a <UART_SetConfig+0x212>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e034      	b.n	800403a <UART_SetConfig+0x212>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e031      	b.n	800403a <UART_SetConfig+0x212>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e02e      	b.n	800403a <UART_SetConfig+0x212>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e02b      	b.n	800403a <UART_SetConfig+0x212>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <UART_SetConfig+0x2f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d124      	bne.n	8004036 <UART_SetConfig+0x20e>
 8003fec:	4b46      	ldr	r3, [pc, #280]	; (8004108 <UART_SetConfig+0x2e0>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ff4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ff8:	d011      	beq.n	800401e <UART_SetConfig+0x1f6>
 8003ffa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ffe:	d817      	bhi.n	8004030 <UART_SetConfig+0x208>
 8004000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004004:	d011      	beq.n	800402a <UART_SetConfig+0x202>
 8004006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400a:	d811      	bhi.n	8004030 <UART_SetConfig+0x208>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <UART_SetConfig+0x1f0>
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004014:	d006      	beq.n	8004024 <UART_SetConfig+0x1fc>
 8004016:	e00b      	b.n	8004030 <UART_SetConfig+0x208>
 8004018:	2300      	movs	r3, #0
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e00d      	b.n	800403a <UART_SetConfig+0x212>
 800401e:	2302      	movs	r3, #2
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e00a      	b.n	800403a <UART_SetConfig+0x212>
 8004024:	2304      	movs	r3, #4
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e007      	b.n	800403a <UART_SetConfig+0x212>
 800402a:	2308      	movs	r3, #8
 800402c:	77fb      	strb	r3, [r7, #31]
 800402e:	e004      	b.n	800403a <UART_SetConfig+0x212>
 8004030:	2310      	movs	r3, #16
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e001      	b.n	800403a <UART_SetConfig+0x212>
 8004036:	2310      	movs	r3, #16
 8004038:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004042:	d16d      	bne.n	8004120 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d827      	bhi.n	800409a <UART_SetConfig+0x272>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x228>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800409b 	.word	0x0800409b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
 8004070:	08004093 	.word	0x08004093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7ff f936 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004078:	61b8      	str	r0, [r7, #24]
        break;
 800407a:	e013      	b.n	80040a4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7ff f954 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <UART_SetConfig+0x2f4>)
 8004086:	61bb      	str	r3, [r7, #24]
        break;
 8004088:	e00c      	b.n	80040a4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7ff f8b5 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800408e:	61b8      	str	r0, [r7, #24]
        break;
 8004090:	e008      	b.n	80040a4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	61bb      	str	r3, [r7, #24]
        break;
 8004098:	e004      	b.n	80040a4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77bb      	strb	r3, [r7, #30]
        break;
 80040a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8086 	beq.w	80041b8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	005a      	lsls	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	441a      	add	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d916      	bls.n	80040f8 <UART_SetConfig+0x2d0>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d212      	bcs.n	80040f8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	89fa      	ldrh	r2, [r7, #14]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	e05f      	b.n	80041b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77bb      	strb	r3, [r7, #30]
 80040fc:	e05c      	b.n	80041b8 <UART_SetConfig+0x390>
 80040fe:	bf00      	nop
 8004100:	efff69f3 	.word	0xefff69f3
 8004104:	40013800 	.word	0x40013800
 8004108:	40021000 	.word	0x40021000
 800410c:	40004400 	.word	0x40004400
 8004110:	40004800 	.word	0x40004800
 8004114:	40004c00 	.word	0x40004c00
 8004118:	40005000 	.word	0x40005000
 800411c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d827      	bhi.n	8004176 <UART_SetConfig+0x34e>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x304>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7ff f8c8 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004154:	61b8      	str	r0, [r7, #24]
        break;
 8004156:	e013      	b.n	8004180 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7ff f8e6 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800415c:	61b8      	str	r0, [r7, #24]
        break;
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <UART_SetConfig+0x3a8>)
 8004162:	61bb      	str	r3, [r7, #24]
        break;
 8004164:	e00c      	b.n	8004180 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7ff f847 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800416a:	61b8      	str	r0, [r7, #24]
        break;
 800416c:	e008      	b.n	8004180 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	61bb      	str	r3, [r7, #24]
        break;
 8004174:	e004      	b.n	8004180 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	77bb      	strb	r3, [r7, #30]
        break;
 800417e:	bf00      	nop
    }

    if (pclk != 0U)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085a      	lsrs	r2, r3, #1
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	d908      	bls.n	80041b4 <UART_SetConfig+0x38c>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d204      	bcs.n	80041b4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	e001      	b.n	80041b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d2:	d10a      	bne.n	80042ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004328:	f7fc fd52 	bl	8000dd0 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d10e      	bne.n	800435a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f82d 	bl	80043aa <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e023      	b.n	80043a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d10e      	bne.n	8004386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f817 	bl	80043aa <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e00d      	b.n	80043a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ba:	e05e      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d05a      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fc fd04 	bl	8000dd0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <UART_WaitOnFlagUntilTimeout+0x30>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11b      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e043      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02c      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d124      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004438:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004448:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d091      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d10e      	bne.n	80044f6 <UART_Start_Receive_IT+0x52>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <UART_Start_Receive_IT+0x48>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ea:	e02d      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f4:	e028      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <UART_Start_Receive_IT+0x76>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d104      	bne.n	8004510 <UART_Start_Receive_IT+0x6c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	22ff      	movs	r2, #255	; 0xff
 800450a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800450e:	e01b      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	227f      	movs	r2, #127	; 0x7f
 8004514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004518:	e016      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004522:	d10d      	bne.n	8004540 <UART_Start_Receive_IT+0x9c>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <UART_Start_Receive_IT+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	227f      	movs	r2, #127	; 0x7f
 8004530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004534:	e008      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	223f      	movs	r2, #63	; 0x3f
 800453a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453e:	e003      	b.n	8004548 <UART_Start_Receive_IT+0xa4>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2222      	movs	r2, #34	; 0x22
 8004554:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d107      	bne.n	8004580 <UART_Start_Receive_IT+0xdc>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <UART_Start_Receive_IT+0x108>)
 800457c:	665a      	str	r2, [r3, #100]	; 0x64
 800457e:	e002      	b.n	8004586 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <UART_Start_Receive_IT+0x10c>)
 8004584:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800459c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	08004745 	.word	0x08004745
 80045b0:	08004671 	.word	0x08004671

080045b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d107      	bne.n	80045f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0210 	bic.w	r2, r2, #16
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fbe3 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fbc0 	bl	8003de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800467e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	2b22      	cmp	r3, #34	; 0x22
 8004686:	d151      	bne.n	800472c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800468e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004690:	89bb      	ldrh	r3, [r7, #12]
 8004692:	b2d9      	uxtb	r1, r3
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	400a      	ands	r2, r1
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d138      	bne.n	800473c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046d8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10f      	bne.n	800471e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0210 	bic.w	r2, r2, #16
 800470c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fb7a 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
 800471c:	e002      	b.n	8004724 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fb fde8 	bl	80002f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800472a:	e007      	b.n	800473c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	619a      	str	r2, [r3, #24]
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004752:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004758:	2b22      	cmp	r3, #34	; 0x22
 800475a:	d151      	bne.n	8004800 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004762:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800476a:	89ba      	ldrh	r2, [r7, #12]
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	4013      	ands	r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d138      	bne.n	8004810 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047ac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10f      	bne.n	80047f2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fb10 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
 80047f0:	e002      	b.n	80047f8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fb fd7e 	bl	80002f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047fe:	e007      	b.n	8004810 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0208 	orr.w	r2, r2, #8
 800480e:	619a      	str	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <__errno>:
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <__errno+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4d0d      	ldr	r5, [pc, #52]	; (8004870 <__libc_init_array+0x38>)
 800483c:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	2600      	movs	r6, #0
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	4d0b      	ldr	r5, [pc, #44]	; (8004878 <__libc_init_array+0x40>)
 800484a:	4c0c      	ldr	r4, [pc, #48]	; (800487c <__libc_init_array+0x44>)
 800484c:	f001 f95a 	bl	8005b04 <_init>
 8004850:	1b64      	subs	r4, r4, r5
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	2600      	movs	r6, #0
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	08005eb0 	.word	0x08005eb0
 8004874:	08005eb0 	.word	0x08005eb0
 8004878:	08005eb0 	.word	0x08005eb0
 800487c:	08005eb4 	.word	0x08005eb4

08004880 <memset>:
 8004880:	4402      	add	r2, r0
 8004882:	4603      	mov	r3, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <iprintf>:
 8004890:	b40f      	push	{r0, r1, r2, r3}
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <iprintf+0x2c>)
 8004894:	b513      	push	{r0, r1, r4, lr}
 8004896:	681c      	ldr	r4, [r3, #0]
 8004898:	b124      	cbz	r4, 80048a4 <iprintf+0x14>
 800489a:	69a3      	ldr	r3, [r4, #24]
 800489c:	b913      	cbnz	r3, 80048a4 <iprintf+0x14>
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 fb66 	bl	8004f70 <__sinit>
 80048a4:	ab05      	add	r3, sp, #20
 80048a6:	9a04      	ldr	r2, [sp, #16]
 80048a8:	68a1      	ldr	r1, [r4, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	4620      	mov	r0, r4
 80048ae:	f000 fd51 	bl	8005354 <_vfiprintf_r>
 80048b2:	b002      	add	sp, #8
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	b004      	add	sp, #16
 80048ba:	4770      	bx	lr
 80048bc:	20000010 	.word	0x20000010

080048c0 <_puts_r>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	460e      	mov	r6, r1
 80048c4:	4605      	mov	r5, r0
 80048c6:	b118      	cbz	r0, 80048d0 <_puts_r+0x10>
 80048c8:	6983      	ldr	r3, [r0, #24]
 80048ca:	b90b      	cbnz	r3, 80048d0 <_puts_r+0x10>
 80048cc:	f000 fb50 	bl	8004f70 <__sinit>
 80048d0:	69ab      	ldr	r3, [r5, #24]
 80048d2:	68ac      	ldr	r4, [r5, #8]
 80048d4:	b913      	cbnz	r3, 80048dc <_puts_r+0x1c>
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 fb4a 	bl	8004f70 <__sinit>
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <_puts_r+0xd0>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d120      	bne.n	8004924 <_puts_r+0x64>
 80048e2:	686c      	ldr	r4, [r5, #4]
 80048e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e6:	07db      	lsls	r3, r3, #31
 80048e8:	d405      	bmi.n	80048f6 <_puts_r+0x36>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	0598      	lsls	r0, r3, #22
 80048ee:	d402      	bmi.n	80048f6 <_puts_r+0x36>
 80048f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f2:	f000 fbed 	bl	80050d0 <__retarget_lock_acquire_recursive>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	0719      	lsls	r1, r3, #28
 80048fa:	d51d      	bpl.n	8004938 <_puts_r+0x78>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	b1db      	cbz	r3, 8004938 <_puts_r+0x78>
 8004900:	3e01      	subs	r6, #1
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004908:	3b01      	subs	r3, #1
 800490a:	60a3      	str	r3, [r4, #8]
 800490c:	bb39      	cbnz	r1, 800495e <_puts_r+0x9e>
 800490e:	2b00      	cmp	r3, #0
 8004910:	da38      	bge.n	8004984 <_puts_r+0xc4>
 8004912:	4622      	mov	r2, r4
 8004914:	210a      	movs	r1, #10
 8004916:	4628      	mov	r0, r5
 8004918:	f000 f932 	bl	8004b80 <__swbuf_r>
 800491c:	3001      	adds	r0, #1
 800491e:	d011      	beq.n	8004944 <_puts_r+0x84>
 8004920:	250a      	movs	r5, #10
 8004922:	e011      	b.n	8004948 <_puts_r+0x88>
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <_puts_r+0xd4>)
 8004926:	429c      	cmp	r4, r3
 8004928:	d101      	bne.n	800492e <_puts_r+0x6e>
 800492a:	68ac      	ldr	r4, [r5, #8]
 800492c:	e7da      	b.n	80048e4 <_puts_r+0x24>
 800492e:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <_puts_r+0xd8>)
 8004930:	429c      	cmp	r4, r3
 8004932:	bf08      	it	eq
 8004934:	68ec      	ldreq	r4, [r5, #12]
 8004936:	e7d5      	b.n	80048e4 <_puts_r+0x24>
 8004938:	4621      	mov	r1, r4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f972 	bl	8004c24 <__swsetup_r>
 8004940:	2800      	cmp	r0, #0
 8004942:	d0dd      	beq.n	8004900 <_puts_r+0x40>
 8004944:	f04f 35ff 	mov.w	r5, #4294967295
 8004948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494a:	07da      	lsls	r2, r3, #31
 800494c:	d405      	bmi.n	800495a <_puts_r+0x9a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	d402      	bmi.n	800495a <_puts_r+0x9a>
 8004954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004956:	f000 fbbc 	bl	80050d2 <__retarget_lock_release_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	2b00      	cmp	r3, #0
 8004960:	da04      	bge.n	800496c <_puts_r+0xac>
 8004962:	69a2      	ldr	r2, [r4, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	dc06      	bgt.n	8004976 <_puts_r+0xb6>
 8004968:	290a      	cmp	r1, #10
 800496a:	d004      	beq.n	8004976 <_puts_r+0xb6>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	7019      	strb	r1, [r3, #0]
 8004974:	e7c5      	b.n	8004902 <_puts_r+0x42>
 8004976:	4622      	mov	r2, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f901 	bl	8004b80 <__swbuf_r>
 800497e:	3001      	adds	r0, #1
 8004980:	d1bf      	bne.n	8004902 <_puts_r+0x42>
 8004982:	e7df      	b.n	8004944 <_puts_r+0x84>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	250a      	movs	r5, #10
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	701d      	strb	r5, [r3, #0]
 800498e:	e7db      	b.n	8004948 <_puts_r+0x88>
 8004990:	08005e3c 	.word	0x08005e3c
 8004994:	08005e5c 	.word	0x08005e5c
 8004998:	08005e1c 	.word	0x08005e1c

0800499c <puts>:
 800499c:	4b02      	ldr	r3, [pc, #8]	; (80049a8 <puts+0xc>)
 800499e:	4601      	mov	r1, r0
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	f7ff bf8d 	b.w	80048c0 <_puts_r>
 80049a6:	bf00      	nop
 80049a8:	20000010 	.word	0x20000010

080049ac <strtok>:
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <strtok+0x5c>)
 80049ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049b0:	681e      	ldr	r6, [r3, #0]
 80049b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80049b4:	4605      	mov	r5, r0
 80049b6:	b9fc      	cbnz	r4, 80049f8 <strtok+0x4c>
 80049b8:	2050      	movs	r0, #80	; 0x50
 80049ba:	9101      	str	r1, [sp, #4]
 80049bc:	f000 fbee 	bl	800519c <malloc>
 80049c0:	9901      	ldr	r1, [sp, #4]
 80049c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80049c4:	4602      	mov	r2, r0
 80049c6:	b920      	cbnz	r0, 80049d2 <strtok+0x26>
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <strtok+0x60>)
 80049ca:	4811      	ldr	r0, [pc, #68]	; (8004a10 <strtok+0x64>)
 80049cc:	2157      	movs	r1, #87	; 0x57
 80049ce:	f000 f997 	bl	8004d00 <__assert_func>
 80049d2:	e9c0 4400 	strd	r4, r4, [r0]
 80049d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80049de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80049e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80049e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80049ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80049ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80049f2:	6184      	str	r4, [r0, #24]
 80049f4:	7704      	strb	r4, [r0, #28]
 80049f6:	6244      	str	r4, [r0, #36]	; 0x24
 80049f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80049fa:	2301      	movs	r3, #1
 80049fc:	4628      	mov	r0, r5
 80049fe:	b002      	add	sp, #8
 8004a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a04:	f000 b806 	b.w	8004a14 <__strtok_r>
 8004a08:	20000010 	.word	0x20000010
 8004a0c:	08005c64 	.word	0x08005c64
 8004a10:	08005c7b 	.word	0x08005c7b

08004a14 <__strtok_r>:
 8004a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a16:	b908      	cbnz	r0, 8004a1c <__strtok_r+0x8>
 8004a18:	6810      	ldr	r0, [r2, #0]
 8004a1a:	b188      	cbz	r0, 8004a40 <__strtok_r+0x2c>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a24:	460f      	mov	r7, r1
 8004a26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a2a:	b91e      	cbnz	r6, 8004a34 <__strtok_r+0x20>
 8004a2c:	b965      	cbnz	r5, 8004a48 <__strtok_r+0x34>
 8004a2e:	6015      	str	r5, [r2, #0]
 8004a30:	4628      	mov	r0, r5
 8004a32:	e005      	b.n	8004a40 <__strtok_r+0x2c>
 8004a34:	42b5      	cmp	r5, r6
 8004a36:	d1f6      	bne.n	8004a26 <__strtok_r+0x12>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <__strtok_r+0xa>
 8004a3c:	6014      	str	r4, [r2, #0]
 8004a3e:	7003      	strb	r3, [r0, #0]
 8004a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a42:	461c      	mov	r4, r3
 8004a44:	e00c      	b.n	8004a60 <__strtok_r+0x4c>
 8004a46:	b915      	cbnz	r5, 8004a4e <__strtok_r+0x3a>
 8004a48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a4c:	460e      	mov	r6, r1
 8004a4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a52:	42ab      	cmp	r3, r5
 8004a54:	d1f7      	bne.n	8004a46 <__strtok_r+0x32>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f3      	beq.n	8004a42 <__strtok_r+0x2e>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004a60:	6014      	str	r4, [r2, #0]
 8004a62:	e7ed      	b.n	8004a40 <__strtok_r+0x2c>

08004a64 <_strtol_l.isra.0>:
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6a:	d001      	beq.n	8004a70 <_strtol_l.isra.0+0xc>
 8004a6c:	2b24      	cmp	r3, #36	; 0x24
 8004a6e:	d906      	bls.n	8004a7e <_strtol_l.isra.0+0x1a>
 8004a70:	f7ff fedc 	bl	800482c <__errno>
 8004a74:	2316      	movs	r3, #22
 8004a76:	6003      	str	r3, [r0, #0]
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7e:	4f3a      	ldr	r7, [pc, #232]	; (8004b68 <_strtol_l.isra.0+0x104>)
 8004a80:	468e      	mov	lr, r1
 8004a82:	4676      	mov	r6, lr
 8004a84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004a88:	5de5      	ldrb	r5, [r4, r7]
 8004a8a:	f015 0508 	ands.w	r5, r5, #8
 8004a8e:	d1f8      	bne.n	8004a82 <_strtol_l.isra.0+0x1e>
 8004a90:	2c2d      	cmp	r4, #45	; 0x2d
 8004a92:	d134      	bne.n	8004afe <_strtol_l.isra.0+0x9a>
 8004a94:	f89e 4000 	ldrb.w	r4, [lr]
 8004a98:	f04f 0801 	mov.w	r8, #1
 8004a9c:	f106 0e02 	add.w	lr, r6, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <_strtol_l.isra.0+0xfa>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d10c      	bne.n	8004ac2 <_strtol_l.isra.0+0x5e>
 8004aa8:	2c30      	cmp	r4, #48	; 0x30
 8004aaa:	d10a      	bne.n	8004ac2 <_strtol_l.isra.0+0x5e>
 8004aac:	f89e 4000 	ldrb.w	r4, [lr]
 8004ab0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ab4:	2c58      	cmp	r4, #88	; 0x58
 8004ab6:	d14d      	bne.n	8004b54 <_strtol_l.isra.0+0xf0>
 8004ab8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004abc:	2310      	movs	r3, #16
 8004abe:	f10e 0e02 	add.w	lr, lr, #2
 8004ac2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004ac6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004aca:	2600      	movs	r6, #0
 8004acc:	fbbc f9f3 	udiv	r9, ip, r3
 8004ad0:	4635      	mov	r5, r6
 8004ad2:	fb03 ca19 	mls	sl, r3, r9, ip
 8004ad6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004ada:	2f09      	cmp	r7, #9
 8004adc:	d818      	bhi.n	8004b10 <_strtol_l.isra.0+0xac>
 8004ade:	463c      	mov	r4, r7
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	dd24      	ble.n	8004b2e <_strtol_l.isra.0+0xca>
 8004ae4:	2e00      	cmp	r6, #0
 8004ae6:	db1f      	blt.n	8004b28 <_strtol_l.isra.0+0xc4>
 8004ae8:	45a9      	cmp	r9, r5
 8004aea:	d31d      	bcc.n	8004b28 <_strtol_l.isra.0+0xc4>
 8004aec:	d101      	bne.n	8004af2 <_strtol_l.isra.0+0x8e>
 8004aee:	45a2      	cmp	sl, r4
 8004af0:	db1a      	blt.n	8004b28 <_strtol_l.isra.0+0xc4>
 8004af2:	fb05 4503 	mla	r5, r5, r3, r4
 8004af6:	2601      	movs	r6, #1
 8004af8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004afc:	e7eb      	b.n	8004ad6 <_strtol_l.isra.0+0x72>
 8004afe:	2c2b      	cmp	r4, #43	; 0x2b
 8004b00:	bf08      	it	eq
 8004b02:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004b06:	46a8      	mov	r8, r5
 8004b08:	bf08      	it	eq
 8004b0a:	f106 0e02 	addeq.w	lr, r6, #2
 8004b0e:	e7c7      	b.n	8004aa0 <_strtol_l.isra.0+0x3c>
 8004b10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004b14:	2f19      	cmp	r7, #25
 8004b16:	d801      	bhi.n	8004b1c <_strtol_l.isra.0+0xb8>
 8004b18:	3c37      	subs	r4, #55	; 0x37
 8004b1a:	e7e1      	b.n	8004ae0 <_strtol_l.isra.0+0x7c>
 8004b1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004b20:	2f19      	cmp	r7, #25
 8004b22:	d804      	bhi.n	8004b2e <_strtol_l.isra.0+0xca>
 8004b24:	3c57      	subs	r4, #87	; 0x57
 8004b26:	e7db      	b.n	8004ae0 <_strtol_l.isra.0+0x7c>
 8004b28:	f04f 36ff 	mov.w	r6, #4294967295
 8004b2c:	e7e4      	b.n	8004af8 <_strtol_l.isra.0+0x94>
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	da05      	bge.n	8004b3e <_strtol_l.isra.0+0xda>
 8004b32:	2322      	movs	r3, #34	; 0x22
 8004b34:	6003      	str	r3, [r0, #0]
 8004b36:	4665      	mov	r5, ip
 8004b38:	b942      	cbnz	r2, 8004b4c <_strtol_l.isra.0+0xe8>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	e79d      	b.n	8004a7a <_strtol_l.isra.0+0x16>
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
 8004b42:	d000      	beq.n	8004b46 <_strtol_l.isra.0+0xe2>
 8004b44:	426d      	negs	r5, r5
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	d0f7      	beq.n	8004b3a <_strtol_l.isra.0+0xd6>
 8004b4a:	b10e      	cbz	r6, 8004b50 <_strtol_l.isra.0+0xec>
 8004b4c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	e7f2      	b.n	8004b3a <_strtol_l.isra.0+0xd6>
 8004b54:	2430      	movs	r4, #48	; 0x30
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1b3      	bne.n	8004ac2 <_strtol_l.isra.0+0x5e>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	e7b1      	b.n	8004ac2 <_strtol_l.isra.0+0x5e>
 8004b5e:	2c30      	cmp	r4, #48	; 0x30
 8004b60:	d0a4      	beq.n	8004aac <_strtol_l.isra.0+0x48>
 8004b62:	230a      	movs	r3, #10
 8004b64:	e7ad      	b.n	8004ac2 <_strtol_l.isra.0+0x5e>
 8004b66:	bf00      	nop
 8004b68:	08005d19 	.word	0x08005d19

08004b6c <strtol>:
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	460a      	mov	r2, r1
 8004b70:	4601      	mov	r1, r0
 8004b72:	4802      	ldr	r0, [pc, #8]	; (8004b7c <strtol+0x10>)
 8004b74:	6800      	ldr	r0, [r0, #0]
 8004b76:	f7ff bf75 	b.w	8004a64 <_strtol_l.isra.0>
 8004b7a:	bf00      	nop
 8004b7c:	20000010 	.word	0x20000010

08004b80 <__swbuf_r>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	460e      	mov	r6, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	4605      	mov	r5, r0
 8004b88:	b118      	cbz	r0, 8004b92 <__swbuf_r+0x12>
 8004b8a:	6983      	ldr	r3, [r0, #24]
 8004b8c:	b90b      	cbnz	r3, 8004b92 <__swbuf_r+0x12>
 8004b8e:	f000 f9ef 	bl	8004f70 <__sinit>
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <__swbuf_r+0x98>)
 8004b94:	429c      	cmp	r4, r3
 8004b96:	d12b      	bne.n	8004bf0 <__swbuf_r+0x70>
 8004b98:	686c      	ldr	r4, [r5, #4]
 8004b9a:	69a3      	ldr	r3, [r4, #24]
 8004b9c:	60a3      	str	r3, [r4, #8]
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	071a      	lsls	r2, r3, #28
 8004ba2:	d52f      	bpl.n	8004c04 <__swbuf_r+0x84>
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	b36b      	cbz	r3, 8004c04 <__swbuf_r+0x84>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	1ac0      	subs	r0, r0, r3
 8004bae:	6963      	ldr	r3, [r4, #20]
 8004bb0:	b2f6      	uxtb	r6, r6
 8004bb2:	4283      	cmp	r3, r0
 8004bb4:	4637      	mov	r7, r6
 8004bb6:	dc04      	bgt.n	8004bc2 <__swbuf_r+0x42>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f944 	bl	8004e48 <_fflush_r>
 8004bc0:	bb30      	cbnz	r0, 8004c10 <__swbuf_r+0x90>
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60a3      	str	r3, [r4, #8]
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	6022      	str	r2, [r4, #0]
 8004bce:	701e      	strb	r6, [r3, #0]
 8004bd0:	6963      	ldr	r3, [r4, #20]
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	4283      	cmp	r3, r0
 8004bd6:	d004      	beq.n	8004be2 <__swbuf_r+0x62>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d506      	bpl.n	8004bec <__swbuf_r+0x6c>
 8004bde:	2e0a      	cmp	r6, #10
 8004be0:	d104      	bne.n	8004bec <__swbuf_r+0x6c>
 8004be2:	4621      	mov	r1, r4
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 f92f 	bl	8004e48 <_fflush_r>
 8004bea:	b988      	cbnz	r0, 8004c10 <__swbuf_r+0x90>
 8004bec:	4638      	mov	r0, r7
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <__swbuf_r+0x9c>)
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	d101      	bne.n	8004bfa <__swbuf_r+0x7a>
 8004bf6:	68ac      	ldr	r4, [r5, #8]
 8004bf8:	e7cf      	b.n	8004b9a <__swbuf_r+0x1a>
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <__swbuf_r+0xa0>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	bf08      	it	eq
 8004c00:	68ec      	ldreq	r4, [r5, #12]
 8004c02:	e7ca      	b.n	8004b9a <__swbuf_r+0x1a>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f80c 	bl	8004c24 <__swsetup_r>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d0cb      	beq.n	8004ba8 <__swbuf_r+0x28>
 8004c10:	f04f 37ff 	mov.w	r7, #4294967295
 8004c14:	e7ea      	b.n	8004bec <__swbuf_r+0x6c>
 8004c16:	bf00      	nop
 8004c18:	08005e3c 	.word	0x08005e3c
 8004c1c:	08005e5c 	.word	0x08005e5c
 8004c20:	08005e1c 	.word	0x08005e1c

08004c24 <__swsetup_r>:
 8004c24:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <__swsetup_r+0xcc>)
 8004c26:	b570      	push	{r4, r5, r6, lr}
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	b125      	cbz	r5, 8004c3a <__swsetup_r+0x16>
 8004c30:	69ab      	ldr	r3, [r5, #24]
 8004c32:	b913      	cbnz	r3, 8004c3a <__swsetup_r+0x16>
 8004c34:	4628      	mov	r0, r5
 8004c36:	f000 f99b 	bl	8004f70 <__sinit>
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <__swsetup_r+0xd0>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d10f      	bne.n	8004c60 <__swsetup_r+0x3c>
 8004c40:	686c      	ldr	r4, [r5, #4]
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c48:	0719      	lsls	r1, r3, #28
 8004c4a:	d42c      	bmi.n	8004ca6 <__swsetup_r+0x82>
 8004c4c:	06dd      	lsls	r5, r3, #27
 8004c4e:	d411      	bmi.n	8004c74 <__swsetup_r+0x50>
 8004c50:	2309      	movs	r3, #9
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5e:	e03e      	b.n	8004cde <__swsetup_r+0xba>
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <__swsetup_r+0xd4>)
 8004c62:	429c      	cmp	r4, r3
 8004c64:	d101      	bne.n	8004c6a <__swsetup_r+0x46>
 8004c66:	68ac      	ldr	r4, [r5, #8]
 8004c68:	e7eb      	b.n	8004c42 <__swsetup_r+0x1e>
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <__swsetup_r+0xd8>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	bf08      	it	eq
 8004c70:	68ec      	ldreq	r4, [r5, #12]
 8004c72:	e7e6      	b.n	8004c42 <__swsetup_r+0x1e>
 8004c74:	0758      	lsls	r0, r3, #29
 8004c76:	d512      	bpl.n	8004c9e <__swsetup_r+0x7a>
 8004c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c7a:	b141      	cbz	r1, 8004c8e <__swsetup_r+0x6a>
 8004c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <__swsetup_r+0x66>
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 fa91 	bl	80051ac <_free_r>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	2300      	movs	r3, #0
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	b94b      	cbnz	r3, 8004cbe <__swsetup_r+0x9a>
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d003      	beq.n	8004cbe <__swsetup_r+0x9a>
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 fa2f 	bl	800511c <__smakebuf_r>
 8004cbe:	89a0      	ldrh	r0, [r4, #12]
 8004cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc4:	f010 0301 	ands.w	r3, r0, #1
 8004cc8:	d00a      	beq.n	8004ce0 <__swsetup_r+0xbc>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60a3      	str	r3, [r4, #8]
 8004cce:	6963      	ldr	r3, [r4, #20]
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	61a3      	str	r3, [r4, #24]
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	b943      	cbnz	r3, 8004cea <__swsetup_r+0xc6>
 8004cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cdc:	d1ba      	bne.n	8004c54 <__swsetup_r+0x30>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	0781      	lsls	r1, r0, #30
 8004ce2:	bf58      	it	pl
 8004ce4:	6963      	ldrpl	r3, [r4, #20]
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	e7f4      	b.n	8004cd4 <__swsetup_r+0xb0>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e7f7      	b.n	8004cde <__swsetup_r+0xba>
 8004cee:	bf00      	nop
 8004cf0:	20000010 	.word	0x20000010
 8004cf4:	08005e3c 	.word	0x08005e3c
 8004cf8:	08005e5c 	.word	0x08005e5c
 8004cfc:	08005e1c 	.word	0x08005e1c

08004d00 <__assert_func>:
 8004d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d02:	4614      	mov	r4, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <__assert_func+0x2c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	68d8      	ldr	r0, [r3, #12]
 8004d0e:	b14c      	cbz	r4, 8004d24 <__assert_func+0x24>
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <__assert_func+0x30>)
 8004d12:	9100      	str	r1, [sp, #0]
 8004d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d18:	4906      	ldr	r1, [pc, #24]	; (8004d34 <__assert_func+0x34>)
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	f000 f9a6 	bl	800506c <fiprintf>
 8004d20:	f000 fe42 	bl	80059a8 <abort>
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <__assert_func+0x38>)
 8004d26:	461c      	mov	r4, r3
 8004d28:	e7f3      	b.n	8004d12 <__assert_func+0x12>
 8004d2a:	bf00      	nop
 8004d2c:	20000010 	.word	0x20000010
 8004d30:	08005cdc 	.word	0x08005cdc
 8004d34:	08005ce9 	.word	0x08005ce9
 8004d38:	08005d17 	.word	0x08005d17

08004d3c <__sflush_r>:
 8004d3c:	898a      	ldrh	r2, [r1, #12]
 8004d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	4605      	mov	r5, r0
 8004d44:	0710      	lsls	r0, r2, #28
 8004d46:	460c      	mov	r4, r1
 8004d48:	d458      	bmi.n	8004dfc <__sflush_r+0xc0>
 8004d4a:	684b      	ldr	r3, [r1, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dc05      	bgt.n	8004d5c <__sflush_r+0x20>
 8004d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dc02      	bgt.n	8004d5c <__sflush_r+0x20>
 8004d56:	2000      	movs	r0, #0
 8004d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	d0f9      	beq.n	8004d56 <__sflush_r+0x1a>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d68:	682f      	ldr	r7, [r5, #0]
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	d032      	beq.n	8004dd4 <__sflush_r+0x98>
 8004d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	075a      	lsls	r2, r3, #29
 8004d74:	d505      	bpl.n	8004d82 <__sflush_r+0x46>
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	1ac0      	subs	r0, r0, r3
 8004d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d7c:	b10b      	cbz	r3, 8004d82 <__sflush_r+0x46>
 8004d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	4602      	mov	r2, r0
 8004d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d88:	6a21      	ldr	r1, [r4, #32]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b0      	blx	r6
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	d106      	bne.n	8004da2 <__sflush_r+0x66>
 8004d94:	6829      	ldr	r1, [r5, #0]
 8004d96:	291d      	cmp	r1, #29
 8004d98:	d82c      	bhi.n	8004df4 <__sflush_r+0xb8>
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <__sflush_r+0x108>)
 8004d9c:	40ca      	lsrs	r2, r1
 8004d9e:	07d6      	lsls	r6, r2, #31
 8004da0:	d528      	bpl.n	8004df4 <__sflush_r+0xb8>
 8004da2:	2200      	movs	r2, #0
 8004da4:	6062      	str	r2, [r4, #4]
 8004da6:	04d9      	lsls	r1, r3, #19
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	6022      	str	r2, [r4, #0]
 8004dac:	d504      	bpl.n	8004db8 <__sflush_r+0x7c>
 8004dae:	1c42      	adds	r2, r0, #1
 8004db0:	d101      	bne.n	8004db6 <__sflush_r+0x7a>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	b903      	cbnz	r3, 8004db8 <__sflush_r+0x7c>
 8004db6:	6560      	str	r0, [r4, #84]	; 0x54
 8004db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dba:	602f      	str	r7, [r5, #0]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d0ca      	beq.n	8004d56 <__sflush_r+0x1a>
 8004dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	d002      	beq.n	8004dce <__sflush_r+0x92>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f9ef 	bl	80051ac <_free_r>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd2:	e7c1      	b.n	8004d58 <__sflush_r+0x1c>
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b0      	blx	r6
 8004ddc:	1c41      	adds	r1, r0, #1
 8004dde:	d1c7      	bne.n	8004d70 <__sflush_r+0x34>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0c4      	beq.n	8004d70 <__sflush_r+0x34>
 8004de6:	2b1d      	cmp	r3, #29
 8004de8:	d001      	beq.n	8004dee <__sflush_r+0xb2>
 8004dea:	2b16      	cmp	r3, #22
 8004dec:	d101      	bne.n	8004df2 <__sflush_r+0xb6>
 8004dee:	602f      	str	r7, [r5, #0]
 8004df0:	e7b1      	b.n	8004d56 <__sflush_r+0x1a>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	e7ad      	b.n	8004d58 <__sflush_r+0x1c>
 8004dfc:	690f      	ldr	r7, [r1, #16]
 8004dfe:	2f00      	cmp	r7, #0
 8004e00:	d0a9      	beq.n	8004d56 <__sflush_r+0x1a>
 8004e02:	0793      	lsls	r3, r2, #30
 8004e04:	680e      	ldr	r6, [r1, #0]
 8004e06:	bf08      	it	eq
 8004e08:	694b      	ldreq	r3, [r1, #20]
 8004e0a:	600f      	str	r7, [r1, #0]
 8004e0c:	bf18      	it	ne
 8004e0e:	2300      	movne	r3, #0
 8004e10:	eba6 0807 	sub.w	r8, r6, r7
 8004e14:	608b      	str	r3, [r1, #8]
 8004e16:	f1b8 0f00 	cmp.w	r8, #0
 8004e1a:	dd9c      	ble.n	8004d56 <__sflush_r+0x1a>
 8004e1c:	6a21      	ldr	r1, [r4, #32]
 8004e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e20:	4643      	mov	r3, r8
 8004e22:	463a      	mov	r2, r7
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b0      	blx	r6
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	dc06      	bgt.n	8004e3a <__sflush_r+0xfe>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e78e      	b.n	8004d58 <__sflush_r+0x1c>
 8004e3a:	4407      	add	r7, r0
 8004e3c:	eba8 0800 	sub.w	r8, r8, r0
 8004e40:	e7e9      	b.n	8004e16 <__sflush_r+0xda>
 8004e42:	bf00      	nop
 8004e44:	20400001 	.word	0x20400001

08004e48 <_fflush_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	b913      	cbnz	r3, 8004e58 <_fflush_r+0x10>
 8004e52:	2500      	movs	r5, #0
 8004e54:	4628      	mov	r0, r5
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	b118      	cbz	r0, 8004e62 <_fflush_r+0x1a>
 8004e5a:	6983      	ldr	r3, [r0, #24]
 8004e5c:	b90b      	cbnz	r3, 8004e62 <_fflush_r+0x1a>
 8004e5e:	f000 f887 	bl	8004f70 <__sinit>
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <_fflush_r+0x6c>)
 8004e64:	429c      	cmp	r4, r3
 8004e66:	d11b      	bne.n	8004ea0 <_fflush_r+0x58>
 8004e68:	686c      	ldr	r4, [r5, #4]
 8004e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ef      	beq.n	8004e52 <_fflush_r+0xa>
 8004e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e74:	07d0      	lsls	r0, r2, #31
 8004e76:	d404      	bmi.n	8004e82 <_fflush_r+0x3a>
 8004e78:	0599      	lsls	r1, r3, #22
 8004e7a:	d402      	bmi.n	8004e82 <_fflush_r+0x3a>
 8004e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7e:	f000 f927 	bl	80050d0 <__retarget_lock_acquire_recursive>
 8004e82:	4628      	mov	r0, r5
 8004e84:	4621      	mov	r1, r4
 8004e86:	f7ff ff59 	bl	8004d3c <__sflush_r>
 8004e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e8c:	07da      	lsls	r2, r3, #31
 8004e8e:	4605      	mov	r5, r0
 8004e90:	d4e0      	bmi.n	8004e54 <_fflush_r+0xc>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	059b      	lsls	r3, r3, #22
 8004e96:	d4dd      	bmi.n	8004e54 <_fflush_r+0xc>
 8004e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9a:	f000 f91a 	bl	80050d2 <__retarget_lock_release_recursive>
 8004e9e:	e7d9      	b.n	8004e54 <_fflush_r+0xc>
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <_fflush_r+0x70>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d101      	bne.n	8004eaa <_fflush_r+0x62>
 8004ea6:	68ac      	ldr	r4, [r5, #8]
 8004ea8:	e7df      	b.n	8004e6a <_fflush_r+0x22>
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <_fflush_r+0x74>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	bf08      	it	eq
 8004eb0:	68ec      	ldreq	r4, [r5, #12]
 8004eb2:	e7da      	b.n	8004e6a <_fflush_r+0x22>
 8004eb4:	08005e3c 	.word	0x08005e3c
 8004eb8:	08005e5c 	.word	0x08005e5c
 8004ebc:	08005e1c 	.word	0x08005e1c

08004ec0 <std>:
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ece:	6083      	str	r3, [r0, #8]
 8004ed0:	8181      	strh	r1, [r0, #12]
 8004ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed4:	81c2      	strh	r2, [r0, #14]
 8004ed6:	6183      	str	r3, [r0, #24]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	2208      	movs	r2, #8
 8004edc:	305c      	adds	r0, #92	; 0x5c
 8004ede:	f7ff fccf 	bl	8004880 <memset>
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <std+0x38>)
 8004ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <std+0x3c>)
 8004ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <std+0x40>)
 8004eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <std+0x44>)
 8004ef0:	6224      	str	r4, [r4, #32]
 8004ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	bf00      	nop
 8004ef8:	080058fd 	.word	0x080058fd
 8004efc:	0800591f 	.word	0x0800591f
 8004f00:	08005957 	.word	0x08005957
 8004f04:	0800597b 	.word	0x0800597b

08004f08 <_cleanup_r>:
 8004f08:	4901      	ldr	r1, [pc, #4]	; (8004f10 <_cleanup_r+0x8>)
 8004f0a:	f000 b8c1 	b.w	8005090 <_fwalk_reent>
 8004f0e:	bf00      	nop
 8004f10:	08004e49 	.word	0x08004e49

08004f14 <__sfmoreglue>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	1e4a      	subs	r2, r1, #1
 8004f18:	2568      	movs	r5, #104	; 0x68
 8004f1a:	4355      	muls	r5, r2
 8004f1c:	460e      	mov	r6, r1
 8004f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f22:	f000 f993 	bl	800524c <_malloc_r>
 8004f26:	4604      	mov	r4, r0
 8004f28:	b140      	cbz	r0, 8004f3c <__sfmoreglue+0x28>
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f30:	300c      	adds	r0, #12
 8004f32:	60a0      	str	r0, [r4, #8]
 8004f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f38:	f7ff fca2 	bl	8004880 <memset>
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}

08004f40 <__sfp_lock_acquire>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__sfp_lock_acquire+0x8>)
 8004f42:	f000 b8c5 	b.w	80050d0 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	2000024c 	.word	0x2000024c

08004f4c <__sfp_lock_release>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__sfp_lock_release+0x8>)
 8004f4e:	f000 b8c0 	b.w	80050d2 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	2000024c 	.word	0x2000024c

08004f58 <__sinit_lock_acquire>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__sinit_lock_acquire+0x8>)
 8004f5a:	f000 b8b9 	b.w	80050d0 <__retarget_lock_acquire_recursive>
 8004f5e:	bf00      	nop
 8004f60:	20000247 	.word	0x20000247

08004f64 <__sinit_lock_release>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__sinit_lock_release+0x8>)
 8004f66:	f000 b8b4 	b.w	80050d2 <__retarget_lock_release_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	20000247 	.word	0x20000247

08004f70 <__sinit>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	4604      	mov	r4, r0
 8004f74:	f7ff fff0 	bl	8004f58 <__sinit_lock_acquire>
 8004f78:	69a3      	ldr	r3, [r4, #24]
 8004f7a:	b11b      	cbz	r3, 8004f84 <__sinit+0x14>
 8004f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f80:	f7ff bff0 	b.w	8004f64 <__sinit_lock_release>
 8004f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f88:	6523      	str	r3, [r4, #80]	; 0x50
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <__sinit+0x68>)
 8004f8c:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <__sinit+0x6c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	bf04      	itt	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	61a3      	streq	r3, [r4, #24]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f820 	bl	8004fe0 <__sfp>
 8004fa0:	6060      	str	r0, [r4, #4]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f81c 	bl	8004fe0 <__sfp>
 8004fa8:	60a0      	str	r0, [r4, #8]
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f818 	bl	8004fe0 <__sfp>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	60e0      	str	r0, [r4, #12]
 8004fb4:	2104      	movs	r1, #4
 8004fb6:	6860      	ldr	r0, [r4, #4]
 8004fb8:	f7ff ff82 	bl	8004ec0 <std>
 8004fbc:	68a0      	ldr	r0, [r4, #8]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2109      	movs	r1, #9
 8004fc2:	f7ff ff7d 	bl	8004ec0 <std>
 8004fc6:	68e0      	ldr	r0, [r4, #12]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	2112      	movs	r1, #18
 8004fcc:	f7ff ff78 	bl	8004ec0 <std>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61a3      	str	r3, [r4, #24]
 8004fd4:	e7d2      	b.n	8004f7c <__sinit+0xc>
 8004fd6:	bf00      	nop
 8004fd8:	08005c60 	.word	0x08005c60
 8004fdc:	08004f09 	.word	0x08004f09

08004fe0 <__sfp>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	4607      	mov	r7, r0
 8004fe4:	f7ff ffac 	bl	8004f40 <__sfp_lock_acquire>
 8004fe8:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <__sfp+0x84>)
 8004fea:	681e      	ldr	r6, [r3, #0]
 8004fec:	69b3      	ldr	r3, [r6, #24]
 8004fee:	b913      	cbnz	r3, 8004ff6 <__sfp+0x16>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7ff ffbd 	bl	8004f70 <__sinit>
 8004ff6:	3648      	adds	r6, #72	; 0x48
 8004ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	d503      	bpl.n	8005008 <__sfp+0x28>
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	b30b      	cbz	r3, 8005048 <__sfp+0x68>
 8005004:	6836      	ldr	r6, [r6, #0]
 8005006:	e7f7      	b.n	8004ff8 <__sfp+0x18>
 8005008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800500c:	b9d5      	cbnz	r5, 8005044 <__sfp+0x64>
 800500e:	4b16      	ldr	r3, [pc, #88]	; (8005068 <__sfp+0x88>)
 8005010:	60e3      	str	r3, [r4, #12]
 8005012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005016:	6665      	str	r5, [r4, #100]	; 0x64
 8005018:	f000 f859 	bl	80050ce <__retarget_lock_init_recursive>
 800501c:	f7ff ff96 	bl	8004f4c <__sfp_lock_release>
 8005020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005028:	6025      	str	r5, [r4, #0]
 800502a:	61a5      	str	r5, [r4, #24]
 800502c:	2208      	movs	r2, #8
 800502e:	4629      	mov	r1, r5
 8005030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005034:	f7ff fc24 	bl	8004880 <memset>
 8005038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800503c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005040:	4620      	mov	r0, r4
 8005042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005044:	3468      	adds	r4, #104	; 0x68
 8005046:	e7d9      	b.n	8004ffc <__sfp+0x1c>
 8005048:	2104      	movs	r1, #4
 800504a:	4638      	mov	r0, r7
 800504c:	f7ff ff62 	bl	8004f14 <__sfmoreglue>
 8005050:	4604      	mov	r4, r0
 8005052:	6030      	str	r0, [r6, #0]
 8005054:	2800      	cmp	r0, #0
 8005056:	d1d5      	bne.n	8005004 <__sfp+0x24>
 8005058:	f7ff ff78 	bl	8004f4c <__sfp_lock_release>
 800505c:	230c      	movs	r3, #12
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	e7ee      	b.n	8005040 <__sfp+0x60>
 8005062:	bf00      	nop
 8005064:	08005c60 	.word	0x08005c60
 8005068:	ffff0001 	.word	0xffff0001

0800506c <fiprintf>:
 800506c:	b40e      	push	{r1, r2, r3}
 800506e:	b503      	push	{r0, r1, lr}
 8005070:	4601      	mov	r1, r0
 8005072:	ab03      	add	r3, sp, #12
 8005074:	4805      	ldr	r0, [pc, #20]	; (800508c <fiprintf+0x20>)
 8005076:	f853 2b04 	ldr.w	r2, [r3], #4
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	f000 f969 	bl	8005354 <_vfiprintf_r>
 8005082:	b002      	add	sp, #8
 8005084:	f85d eb04 	ldr.w	lr, [sp], #4
 8005088:	b003      	add	sp, #12
 800508a:	4770      	bx	lr
 800508c:	20000010 	.word	0x20000010

08005090 <_fwalk_reent>:
 8005090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005094:	4606      	mov	r6, r0
 8005096:	4688      	mov	r8, r1
 8005098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800509c:	2700      	movs	r7, #0
 800509e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a2:	f1b9 0901 	subs.w	r9, r9, #1
 80050a6:	d505      	bpl.n	80050b4 <_fwalk_reent+0x24>
 80050a8:	6824      	ldr	r4, [r4, #0]
 80050aa:	2c00      	cmp	r4, #0
 80050ac:	d1f7      	bne.n	800509e <_fwalk_reent+0xe>
 80050ae:	4638      	mov	r0, r7
 80050b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b4:	89ab      	ldrh	r3, [r5, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d907      	bls.n	80050ca <_fwalk_reent+0x3a>
 80050ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050be:	3301      	adds	r3, #1
 80050c0:	d003      	beq.n	80050ca <_fwalk_reent+0x3a>
 80050c2:	4629      	mov	r1, r5
 80050c4:	4630      	mov	r0, r6
 80050c6:	47c0      	blx	r8
 80050c8:	4307      	orrs	r7, r0
 80050ca:	3568      	adds	r5, #104	; 0x68
 80050cc:	e7e9      	b.n	80050a2 <_fwalk_reent+0x12>

080050ce <__retarget_lock_init_recursive>:
 80050ce:	4770      	bx	lr

080050d0 <__retarget_lock_acquire_recursive>:
 80050d0:	4770      	bx	lr

080050d2 <__retarget_lock_release_recursive>:
 80050d2:	4770      	bx	lr

080050d4 <__swhatbuf_r>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	460e      	mov	r6, r1
 80050d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050dc:	2900      	cmp	r1, #0
 80050de:	b096      	sub	sp, #88	; 0x58
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	da07      	bge.n	80050f6 <__swhatbuf_r+0x22>
 80050e6:	2300      	movs	r3, #0
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	89b3      	ldrh	r3, [r6, #12]
 80050ec:	061a      	lsls	r2, r3, #24
 80050ee:	d410      	bmi.n	8005112 <__swhatbuf_r+0x3e>
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	e00e      	b.n	8005114 <__swhatbuf_r+0x40>
 80050f6:	466a      	mov	r2, sp
 80050f8:	f000 fc6e 	bl	80059d8 <_fstat_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dbf2      	blt.n	80050e6 <__swhatbuf_r+0x12>
 8005100:	9a01      	ldr	r2, [sp, #4]
 8005102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800510a:	425a      	negs	r2, r3
 800510c:	415a      	adcs	r2, r3
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	e7ee      	b.n	80050f0 <__swhatbuf_r+0x1c>
 8005112:	2340      	movs	r3, #64	; 0x40
 8005114:	2000      	movs	r0, #0
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	b016      	add	sp, #88	; 0x58
 800511a:	bd70      	pop	{r4, r5, r6, pc}

0800511c <__smakebuf_r>:
 800511c:	898b      	ldrh	r3, [r1, #12]
 800511e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005120:	079d      	lsls	r5, r3, #30
 8005122:	4606      	mov	r6, r0
 8005124:	460c      	mov	r4, r1
 8005126:	d507      	bpl.n	8005138 <__smakebuf_r+0x1c>
 8005128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	2301      	movs	r3, #1
 8005132:	6163      	str	r3, [r4, #20]
 8005134:	b002      	add	sp, #8
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	ab01      	add	r3, sp, #4
 800513a:	466a      	mov	r2, sp
 800513c:	f7ff ffca 	bl	80050d4 <__swhatbuf_r>
 8005140:	9900      	ldr	r1, [sp, #0]
 8005142:	4605      	mov	r5, r0
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f881 	bl	800524c <_malloc_r>
 800514a:	b948      	cbnz	r0, 8005160 <__smakebuf_r+0x44>
 800514c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d4ef      	bmi.n	8005134 <__smakebuf_r+0x18>
 8005154:	f023 0303 	bic.w	r3, r3, #3
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	e7e3      	b.n	8005128 <__smakebuf_r+0xc>
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <__smakebuf_r+0x7c>)
 8005162:	62b3      	str	r3, [r6, #40]	; 0x28
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	6020      	str	r0, [r4, #0]
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	9b00      	ldr	r3, [sp, #0]
 8005170:	6163      	str	r3, [r4, #20]
 8005172:	9b01      	ldr	r3, [sp, #4]
 8005174:	6120      	str	r0, [r4, #16]
 8005176:	b15b      	cbz	r3, 8005190 <__smakebuf_r+0x74>
 8005178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800517c:	4630      	mov	r0, r6
 800517e:	f000 fc3d 	bl	80059fc <_isatty_r>
 8005182:	b128      	cbz	r0, 8005190 <__smakebuf_r+0x74>
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	89a0      	ldrh	r0, [r4, #12]
 8005192:	4305      	orrs	r5, r0
 8005194:	81a5      	strh	r5, [r4, #12]
 8005196:	e7cd      	b.n	8005134 <__smakebuf_r+0x18>
 8005198:	08004f09 	.word	0x08004f09

0800519c <malloc>:
 800519c:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <malloc+0xc>)
 800519e:	4601      	mov	r1, r0
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f000 b853 	b.w	800524c <_malloc_r>
 80051a6:	bf00      	nop
 80051a8:	20000010 	.word	0x20000010

080051ac <_free_r>:
 80051ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ae:	2900      	cmp	r1, #0
 80051b0:	d048      	beq.n	8005244 <_free_r+0x98>
 80051b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b6:	9001      	str	r0, [sp, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f1a1 0404 	sub.w	r4, r1, #4
 80051be:	bfb8      	it	lt
 80051c0:	18e4      	addlt	r4, r4, r3
 80051c2:	f000 fc3d 	bl	8005a40 <__malloc_lock>
 80051c6:	4a20      	ldr	r2, [pc, #128]	; (8005248 <_free_r+0x9c>)
 80051c8:	9801      	ldr	r0, [sp, #4]
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	4615      	mov	r5, r2
 80051ce:	b933      	cbnz	r3, 80051de <_free_r+0x32>
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	6014      	str	r4, [r2, #0]
 80051d4:	b003      	add	sp, #12
 80051d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051da:	f000 bc37 	b.w	8005a4c <__malloc_unlock>
 80051de:	42a3      	cmp	r3, r4
 80051e0:	d90b      	bls.n	80051fa <_free_r+0x4e>
 80051e2:	6821      	ldr	r1, [r4, #0]
 80051e4:	1862      	adds	r2, r4, r1
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bf04      	itt	eq
 80051ea:	681a      	ldreq	r2, [r3, #0]
 80051ec:	685b      	ldreq	r3, [r3, #4]
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	bf04      	itt	eq
 80051f2:	1852      	addeq	r2, r2, r1
 80051f4:	6022      	streq	r2, [r4, #0]
 80051f6:	602c      	str	r4, [r5, #0]
 80051f8:	e7ec      	b.n	80051d4 <_free_r+0x28>
 80051fa:	461a      	mov	r2, r3
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b10b      	cbz	r3, 8005204 <_free_r+0x58>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d9fa      	bls.n	80051fa <_free_r+0x4e>
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	1855      	adds	r5, r2, r1
 8005208:	42a5      	cmp	r5, r4
 800520a:	d10b      	bne.n	8005224 <_free_r+0x78>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	4421      	add	r1, r4
 8005210:	1854      	adds	r4, r2, r1
 8005212:	42a3      	cmp	r3, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	d1dd      	bne.n	80051d4 <_free_r+0x28>
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	4421      	add	r1, r4
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	e7d7      	b.n	80051d4 <_free_r+0x28>
 8005224:	d902      	bls.n	800522c <_free_r+0x80>
 8005226:	230c      	movs	r3, #12
 8005228:	6003      	str	r3, [r0, #0]
 800522a:	e7d3      	b.n	80051d4 <_free_r+0x28>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf04      	itt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	bf04      	itt	eq
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6054      	str	r4, [r2, #4]
 8005242:	e7c7      	b.n	80051d4 <_free_r+0x28>
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	2000009c 	.word	0x2000009c

0800524c <_malloc_r>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	1ccd      	adds	r5, r1, #3
 8005250:	f025 0503 	bic.w	r5, r5, #3
 8005254:	3508      	adds	r5, #8
 8005256:	2d0c      	cmp	r5, #12
 8005258:	bf38      	it	cc
 800525a:	250c      	movcc	r5, #12
 800525c:	2d00      	cmp	r5, #0
 800525e:	4606      	mov	r6, r0
 8005260:	db01      	blt.n	8005266 <_malloc_r+0x1a>
 8005262:	42a9      	cmp	r1, r5
 8005264:	d903      	bls.n	800526e <_malloc_r+0x22>
 8005266:	230c      	movs	r3, #12
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	2000      	movs	r0, #0
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526e:	f000 fbe7 	bl	8005a40 <__malloc_lock>
 8005272:	4921      	ldr	r1, [pc, #132]	; (80052f8 <_malloc_r+0xac>)
 8005274:	680a      	ldr	r2, [r1, #0]
 8005276:	4614      	mov	r4, r2
 8005278:	b99c      	cbnz	r4, 80052a2 <_malloc_r+0x56>
 800527a:	4f20      	ldr	r7, [pc, #128]	; (80052fc <_malloc_r+0xb0>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	b923      	cbnz	r3, 800528a <_malloc_r+0x3e>
 8005280:	4621      	mov	r1, r4
 8005282:	4630      	mov	r0, r6
 8005284:	f000 fb2a 	bl	80058dc <_sbrk_r>
 8005288:	6038      	str	r0, [r7, #0]
 800528a:	4629      	mov	r1, r5
 800528c:	4630      	mov	r0, r6
 800528e:	f000 fb25 	bl	80058dc <_sbrk_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d123      	bne.n	80052de <_malloc_r+0x92>
 8005296:	230c      	movs	r3, #12
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	4630      	mov	r0, r6
 800529c:	f000 fbd6 	bl	8005a4c <__malloc_unlock>
 80052a0:	e7e3      	b.n	800526a <_malloc_r+0x1e>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	1b5b      	subs	r3, r3, r5
 80052a6:	d417      	bmi.n	80052d8 <_malloc_r+0x8c>
 80052a8:	2b0b      	cmp	r3, #11
 80052aa:	d903      	bls.n	80052b4 <_malloc_r+0x68>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	441c      	add	r4, r3
 80052b0:	6025      	str	r5, [r4, #0]
 80052b2:	e004      	b.n	80052be <_malloc_r+0x72>
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	42a2      	cmp	r2, r4
 80052b8:	bf0c      	ite	eq
 80052ba:	600b      	streq	r3, [r1, #0]
 80052bc:	6053      	strne	r3, [r2, #4]
 80052be:	4630      	mov	r0, r6
 80052c0:	f000 fbc4 	bl	8005a4c <__malloc_unlock>
 80052c4:	f104 000b 	add.w	r0, r4, #11
 80052c8:	1d23      	adds	r3, r4, #4
 80052ca:	f020 0007 	bic.w	r0, r0, #7
 80052ce:	1ac2      	subs	r2, r0, r3
 80052d0:	d0cc      	beq.n	800526c <_malloc_r+0x20>
 80052d2:	1a1b      	subs	r3, r3, r0
 80052d4:	50a3      	str	r3, [r4, r2]
 80052d6:	e7c9      	b.n	800526c <_malloc_r+0x20>
 80052d8:	4622      	mov	r2, r4
 80052da:	6864      	ldr	r4, [r4, #4]
 80052dc:	e7cc      	b.n	8005278 <_malloc_r+0x2c>
 80052de:	1cc4      	adds	r4, r0, #3
 80052e0:	f024 0403 	bic.w	r4, r4, #3
 80052e4:	42a0      	cmp	r0, r4
 80052e6:	d0e3      	beq.n	80052b0 <_malloc_r+0x64>
 80052e8:	1a21      	subs	r1, r4, r0
 80052ea:	4630      	mov	r0, r6
 80052ec:	f000 faf6 	bl	80058dc <_sbrk_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	d1dd      	bne.n	80052b0 <_malloc_r+0x64>
 80052f4:	e7cf      	b.n	8005296 <_malloc_r+0x4a>
 80052f6:	bf00      	nop
 80052f8:	2000009c 	.word	0x2000009c
 80052fc:	200000a0 	.word	0x200000a0

08005300 <__sfputc_r>:
 8005300:	6893      	ldr	r3, [r2, #8]
 8005302:	3b01      	subs	r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	b410      	push	{r4}
 8005308:	6093      	str	r3, [r2, #8]
 800530a:	da08      	bge.n	800531e <__sfputc_r+0x1e>
 800530c:	6994      	ldr	r4, [r2, #24]
 800530e:	42a3      	cmp	r3, r4
 8005310:	db01      	blt.n	8005316 <__sfputc_r+0x16>
 8005312:	290a      	cmp	r1, #10
 8005314:	d103      	bne.n	800531e <__sfputc_r+0x1e>
 8005316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800531a:	f7ff bc31 	b.w	8004b80 <__swbuf_r>
 800531e:	6813      	ldr	r3, [r2, #0]
 8005320:	1c58      	adds	r0, r3, #1
 8005322:	6010      	str	r0, [r2, #0]
 8005324:	7019      	strb	r1, [r3, #0]
 8005326:	4608      	mov	r0, r1
 8005328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532c:	4770      	bx	lr

0800532e <__sfputs_r>:
 800532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	4614      	mov	r4, r2
 8005336:	18d5      	adds	r5, r2, r3
 8005338:	42ac      	cmp	r4, r5
 800533a:	d101      	bne.n	8005340 <__sfputs_r+0x12>
 800533c:	2000      	movs	r0, #0
 800533e:	e007      	b.n	8005350 <__sfputs_r+0x22>
 8005340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005344:	463a      	mov	r2, r7
 8005346:	4630      	mov	r0, r6
 8005348:	f7ff ffda 	bl	8005300 <__sfputc_r>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d1f3      	bne.n	8005338 <__sfputs_r+0xa>
 8005350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005354 <_vfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	460d      	mov	r5, r1
 800535a:	b09d      	sub	sp, #116	; 0x74
 800535c:	4614      	mov	r4, r2
 800535e:	4698      	mov	r8, r3
 8005360:	4606      	mov	r6, r0
 8005362:	b118      	cbz	r0, 800536c <_vfiprintf_r+0x18>
 8005364:	6983      	ldr	r3, [r0, #24]
 8005366:	b90b      	cbnz	r3, 800536c <_vfiprintf_r+0x18>
 8005368:	f7ff fe02 	bl	8004f70 <__sinit>
 800536c:	4b89      	ldr	r3, [pc, #548]	; (8005594 <_vfiprintf_r+0x240>)
 800536e:	429d      	cmp	r5, r3
 8005370:	d11b      	bne.n	80053aa <_vfiprintf_r+0x56>
 8005372:	6875      	ldr	r5, [r6, #4]
 8005374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	d405      	bmi.n	8005386 <_vfiprintf_r+0x32>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	059a      	lsls	r2, r3, #22
 800537e:	d402      	bmi.n	8005386 <_vfiprintf_r+0x32>
 8005380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005382:	f7ff fea5 	bl	80050d0 <__retarget_lock_acquire_recursive>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	d501      	bpl.n	8005390 <_vfiprintf_r+0x3c>
 800538c:	692b      	ldr	r3, [r5, #16]
 800538e:	b9eb      	cbnz	r3, 80053cc <_vfiprintf_r+0x78>
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff fc46 	bl	8004c24 <__swsetup_r>
 8005398:	b1c0      	cbz	r0, 80053cc <_vfiprintf_r+0x78>
 800539a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800539c:	07dc      	lsls	r4, r3, #31
 800539e:	d50e      	bpl.n	80053be <_vfiprintf_r+0x6a>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	b01d      	add	sp, #116	; 0x74
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	4b7b      	ldr	r3, [pc, #492]	; (8005598 <_vfiprintf_r+0x244>)
 80053ac:	429d      	cmp	r5, r3
 80053ae:	d101      	bne.n	80053b4 <_vfiprintf_r+0x60>
 80053b0:	68b5      	ldr	r5, [r6, #8]
 80053b2:	e7df      	b.n	8005374 <_vfiprintf_r+0x20>
 80053b4:	4b79      	ldr	r3, [pc, #484]	; (800559c <_vfiprintf_r+0x248>)
 80053b6:	429d      	cmp	r5, r3
 80053b8:	bf08      	it	eq
 80053ba:	68f5      	ldreq	r5, [r6, #12]
 80053bc:	e7da      	b.n	8005374 <_vfiprintf_r+0x20>
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	0598      	lsls	r0, r3, #22
 80053c2:	d4ed      	bmi.n	80053a0 <_vfiprintf_r+0x4c>
 80053c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053c6:	f7ff fe84 	bl	80050d2 <__retarget_lock_release_recursive>
 80053ca:	e7e9      	b.n	80053a0 <_vfiprintf_r+0x4c>
 80053cc:	2300      	movs	r3, #0
 80053ce:	9309      	str	r3, [sp, #36]	; 0x24
 80053d0:	2320      	movs	r3, #32
 80053d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053da:	2330      	movs	r3, #48	; 0x30
 80053dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055a0 <_vfiprintf_r+0x24c>
 80053e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053e4:	f04f 0901 	mov.w	r9, #1
 80053e8:	4623      	mov	r3, r4
 80053ea:	469a      	mov	sl, r3
 80053ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f0:	b10a      	cbz	r2, 80053f6 <_vfiprintf_r+0xa2>
 80053f2:	2a25      	cmp	r2, #37	; 0x25
 80053f4:	d1f9      	bne.n	80053ea <_vfiprintf_r+0x96>
 80053f6:	ebba 0b04 	subs.w	fp, sl, r4
 80053fa:	d00b      	beq.n	8005414 <_vfiprintf_r+0xc0>
 80053fc:	465b      	mov	r3, fp
 80053fe:	4622      	mov	r2, r4
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff ff93 	bl	800532e <__sfputs_r>
 8005408:	3001      	adds	r0, #1
 800540a:	f000 80aa 	beq.w	8005562 <_vfiprintf_r+0x20e>
 800540e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005410:	445a      	add	r2, fp
 8005412:	9209      	str	r2, [sp, #36]	; 0x24
 8005414:	f89a 3000 	ldrb.w	r3, [sl]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80a2 	beq.w	8005562 <_vfiprintf_r+0x20e>
 800541e:	2300      	movs	r3, #0
 8005420:	f04f 32ff 	mov.w	r2, #4294967295
 8005424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005428:	f10a 0a01 	add.w	sl, sl, #1
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005434:	931a      	str	r3, [sp, #104]	; 0x68
 8005436:	4654      	mov	r4, sl
 8005438:	2205      	movs	r2, #5
 800543a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800543e:	4858      	ldr	r0, [pc, #352]	; (80055a0 <_vfiprintf_r+0x24c>)
 8005440:	f7fa fed6 	bl	80001f0 <memchr>
 8005444:	9a04      	ldr	r2, [sp, #16]
 8005446:	b9d8      	cbnz	r0, 8005480 <_vfiprintf_r+0x12c>
 8005448:	06d1      	lsls	r1, r2, #27
 800544a:	bf44      	itt	mi
 800544c:	2320      	movmi	r3, #32
 800544e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005452:	0713      	lsls	r3, r2, #28
 8005454:	bf44      	itt	mi
 8005456:	232b      	movmi	r3, #43	; 0x2b
 8005458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800545c:	f89a 3000 	ldrb.w	r3, [sl]
 8005460:	2b2a      	cmp	r3, #42	; 0x2a
 8005462:	d015      	beq.n	8005490 <_vfiprintf_r+0x13c>
 8005464:	9a07      	ldr	r2, [sp, #28]
 8005466:	4654      	mov	r4, sl
 8005468:	2000      	movs	r0, #0
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4621      	mov	r1, r4
 8005470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005474:	3b30      	subs	r3, #48	; 0x30
 8005476:	2b09      	cmp	r3, #9
 8005478:	d94e      	bls.n	8005518 <_vfiprintf_r+0x1c4>
 800547a:	b1b0      	cbz	r0, 80054aa <_vfiprintf_r+0x156>
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	e014      	b.n	80054aa <_vfiprintf_r+0x156>
 8005480:	eba0 0308 	sub.w	r3, r0, r8
 8005484:	fa09 f303 	lsl.w	r3, r9, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	46a2      	mov	sl, r4
 800548e:	e7d2      	b.n	8005436 <_vfiprintf_r+0xe2>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	1d19      	adds	r1, r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbb      	ittet	lt
 800549c:	425b      	neglt	r3, r3
 800549e:	f042 0202 	orrlt.w	r2, r2, #2
 80054a2:	9307      	strge	r3, [sp, #28]
 80054a4:	9307      	strlt	r3, [sp, #28]
 80054a6:	bfb8      	it	lt
 80054a8:	9204      	strlt	r2, [sp, #16]
 80054aa:	7823      	ldrb	r3, [r4, #0]
 80054ac:	2b2e      	cmp	r3, #46	; 0x2e
 80054ae:	d10c      	bne.n	80054ca <_vfiprintf_r+0x176>
 80054b0:	7863      	ldrb	r3, [r4, #1]
 80054b2:	2b2a      	cmp	r3, #42	; 0x2a
 80054b4:	d135      	bne.n	8005522 <_vfiprintf_r+0x1ce>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	1d1a      	adds	r2, r3, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	9203      	str	r2, [sp, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfb8      	it	lt
 80054c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80054c6:	3402      	adds	r4, #2
 80054c8:	9305      	str	r3, [sp, #20]
 80054ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055b0 <_vfiprintf_r+0x25c>
 80054ce:	7821      	ldrb	r1, [r4, #0]
 80054d0:	2203      	movs	r2, #3
 80054d2:	4650      	mov	r0, sl
 80054d4:	f7fa fe8c 	bl	80001f0 <memchr>
 80054d8:	b140      	cbz	r0, 80054ec <_vfiprintf_r+0x198>
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	eba0 000a 	sub.w	r0, r0, sl
 80054e0:	fa03 f000 	lsl.w	r0, r3, r0
 80054e4:	9b04      	ldr	r3, [sp, #16]
 80054e6:	4303      	orrs	r3, r0
 80054e8:	3401      	adds	r4, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	482c      	ldr	r0, [pc, #176]	; (80055a4 <_vfiprintf_r+0x250>)
 80054f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f6:	2206      	movs	r2, #6
 80054f8:	f7fa fe7a 	bl	80001f0 <memchr>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d03f      	beq.n	8005580 <_vfiprintf_r+0x22c>
 8005500:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <_vfiprintf_r+0x254>)
 8005502:	bb1b      	cbnz	r3, 800554c <_vfiprintf_r+0x1f8>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	3307      	adds	r3, #7
 8005508:	f023 0307 	bic.w	r3, r3, #7
 800550c:	3308      	adds	r3, #8
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005512:	443b      	add	r3, r7
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
 8005516:	e767      	b.n	80053e8 <_vfiprintf_r+0x94>
 8005518:	fb0c 3202 	mla	r2, ip, r2, r3
 800551c:	460c      	mov	r4, r1
 800551e:	2001      	movs	r0, #1
 8005520:	e7a5      	b.n	800546e <_vfiprintf_r+0x11a>
 8005522:	2300      	movs	r3, #0
 8005524:	3401      	adds	r4, #1
 8005526:	9305      	str	r3, [sp, #20]
 8005528:	4619      	mov	r1, r3
 800552a:	f04f 0c0a 	mov.w	ip, #10
 800552e:	4620      	mov	r0, r4
 8005530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005534:	3a30      	subs	r2, #48	; 0x30
 8005536:	2a09      	cmp	r2, #9
 8005538:	d903      	bls.n	8005542 <_vfiprintf_r+0x1ee>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0c5      	beq.n	80054ca <_vfiprintf_r+0x176>
 800553e:	9105      	str	r1, [sp, #20]
 8005540:	e7c3      	b.n	80054ca <_vfiprintf_r+0x176>
 8005542:	fb0c 2101 	mla	r1, ip, r1, r2
 8005546:	4604      	mov	r4, r0
 8005548:	2301      	movs	r3, #1
 800554a:	e7f0      	b.n	800552e <_vfiprintf_r+0x1da>
 800554c:	ab03      	add	r3, sp, #12
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	462a      	mov	r2, r5
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <_vfiprintf_r+0x258>)
 8005554:	a904      	add	r1, sp, #16
 8005556:	4630      	mov	r0, r6
 8005558:	f3af 8000 	nop.w
 800555c:	4607      	mov	r7, r0
 800555e:	1c78      	adds	r0, r7, #1
 8005560:	d1d6      	bne.n	8005510 <_vfiprintf_r+0x1bc>
 8005562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005564:	07d9      	lsls	r1, r3, #31
 8005566:	d405      	bmi.n	8005574 <_vfiprintf_r+0x220>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	059a      	lsls	r2, r3, #22
 800556c:	d402      	bmi.n	8005574 <_vfiprintf_r+0x220>
 800556e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005570:	f7ff fdaf 	bl	80050d2 <__retarget_lock_release_recursive>
 8005574:	89ab      	ldrh	r3, [r5, #12]
 8005576:	065b      	lsls	r3, r3, #25
 8005578:	f53f af12 	bmi.w	80053a0 <_vfiprintf_r+0x4c>
 800557c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800557e:	e711      	b.n	80053a4 <_vfiprintf_r+0x50>
 8005580:	ab03      	add	r3, sp, #12
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	462a      	mov	r2, r5
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <_vfiprintf_r+0x258>)
 8005588:	a904      	add	r1, sp, #16
 800558a:	4630      	mov	r0, r6
 800558c:	f000 f880 	bl	8005690 <_printf_i>
 8005590:	e7e4      	b.n	800555c <_vfiprintf_r+0x208>
 8005592:	bf00      	nop
 8005594:	08005e3c 	.word	0x08005e3c
 8005598:	08005e5c 	.word	0x08005e5c
 800559c:	08005e1c 	.word	0x08005e1c
 80055a0:	08005e7c 	.word	0x08005e7c
 80055a4:	08005e86 	.word	0x08005e86
 80055a8:	00000000 	.word	0x00000000
 80055ac:	0800532f 	.word	0x0800532f
 80055b0:	08005e82 	.word	0x08005e82

080055b4 <_printf_common>:
 80055b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	4616      	mov	r6, r2
 80055ba:	4699      	mov	r9, r3
 80055bc:	688a      	ldr	r2, [r1, #8]
 80055be:	690b      	ldr	r3, [r1, #16]
 80055c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c4:	4293      	cmp	r3, r2
 80055c6:	bfb8      	it	lt
 80055c8:	4613      	movlt	r3, r2
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055d0:	4607      	mov	r7, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	b10a      	cbz	r2, 80055da <_printf_common+0x26>
 80055d6:	3301      	adds	r3, #1
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	0699      	lsls	r1, r3, #26
 80055de:	bf42      	ittt	mi
 80055e0:	6833      	ldrmi	r3, [r6, #0]
 80055e2:	3302      	addmi	r3, #2
 80055e4:	6033      	strmi	r3, [r6, #0]
 80055e6:	6825      	ldr	r5, [r4, #0]
 80055e8:	f015 0506 	ands.w	r5, r5, #6
 80055ec:	d106      	bne.n	80055fc <_printf_common+0x48>
 80055ee:	f104 0a19 	add.w	sl, r4, #25
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	6832      	ldr	r2, [r6, #0]
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	dc26      	bgt.n	800564a <_printf_common+0x96>
 80055fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005600:	1e13      	subs	r3, r2, #0
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	bf18      	it	ne
 8005606:	2301      	movne	r3, #1
 8005608:	0692      	lsls	r2, r2, #26
 800560a:	d42b      	bmi.n	8005664 <_printf_common+0xb0>
 800560c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005610:	4649      	mov	r1, r9
 8005612:	4638      	mov	r0, r7
 8005614:	47c0      	blx	r8
 8005616:	3001      	adds	r0, #1
 8005618:	d01e      	beq.n	8005658 <_printf_common+0xa4>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	68e5      	ldr	r5, [r4, #12]
 800561e:	6832      	ldr	r2, [r6, #0]
 8005620:	f003 0306 	and.w	r3, r3, #6
 8005624:	2b04      	cmp	r3, #4
 8005626:	bf08      	it	eq
 8005628:	1aad      	subeq	r5, r5, r2
 800562a:	68a3      	ldr	r3, [r4, #8]
 800562c:	6922      	ldr	r2, [r4, #16]
 800562e:	bf0c      	ite	eq
 8005630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005634:	2500      	movne	r5, #0
 8005636:	4293      	cmp	r3, r2
 8005638:	bfc4      	itt	gt
 800563a:	1a9b      	subgt	r3, r3, r2
 800563c:	18ed      	addgt	r5, r5, r3
 800563e:	2600      	movs	r6, #0
 8005640:	341a      	adds	r4, #26
 8005642:	42b5      	cmp	r5, r6
 8005644:	d11a      	bne.n	800567c <_printf_common+0xc8>
 8005646:	2000      	movs	r0, #0
 8005648:	e008      	b.n	800565c <_printf_common+0xa8>
 800564a:	2301      	movs	r3, #1
 800564c:	4652      	mov	r2, sl
 800564e:	4649      	mov	r1, r9
 8005650:	4638      	mov	r0, r7
 8005652:	47c0      	blx	r8
 8005654:	3001      	adds	r0, #1
 8005656:	d103      	bne.n	8005660 <_printf_common+0xac>
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005660:	3501      	adds	r5, #1
 8005662:	e7c6      	b.n	80055f2 <_printf_common+0x3e>
 8005664:	18e1      	adds	r1, r4, r3
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	2030      	movs	r0, #48	; 0x30
 800566a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800566e:	4422      	add	r2, r4
 8005670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005678:	3302      	adds	r3, #2
 800567a:	e7c7      	b.n	800560c <_printf_common+0x58>
 800567c:	2301      	movs	r3, #1
 800567e:	4622      	mov	r2, r4
 8005680:	4649      	mov	r1, r9
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d0e6      	beq.n	8005658 <_printf_common+0xa4>
 800568a:	3601      	adds	r6, #1
 800568c:	e7d9      	b.n	8005642 <_printf_common+0x8e>
	...

08005690 <_printf_i>:
 8005690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	460c      	mov	r4, r1
 8005696:	4691      	mov	r9, r2
 8005698:	7e27      	ldrb	r7, [r4, #24]
 800569a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800569c:	2f78      	cmp	r7, #120	; 0x78
 800569e:	4680      	mov	r8, r0
 80056a0:	469a      	mov	sl, r3
 80056a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a6:	d807      	bhi.n	80056b8 <_printf_i+0x28>
 80056a8:	2f62      	cmp	r7, #98	; 0x62
 80056aa:	d80a      	bhi.n	80056c2 <_printf_i+0x32>
 80056ac:	2f00      	cmp	r7, #0
 80056ae:	f000 80d8 	beq.w	8005862 <_printf_i+0x1d2>
 80056b2:	2f58      	cmp	r7, #88	; 0x58
 80056b4:	f000 80a3 	beq.w	80057fe <_printf_i+0x16e>
 80056b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056c0:	e03a      	b.n	8005738 <_printf_i+0xa8>
 80056c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056c6:	2b15      	cmp	r3, #21
 80056c8:	d8f6      	bhi.n	80056b8 <_printf_i+0x28>
 80056ca:	a001      	add	r0, pc, #4	; (adr r0, 80056d0 <_printf_i+0x40>)
 80056cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056d0:	08005729 	.word	0x08005729
 80056d4:	0800573d 	.word	0x0800573d
 80056d8:	080056b9 	.word	0x080056b9
 80056dc:	080056b9 	.word	0x080056b9
 80056e0:	080056b9 	.word	0x080056b9
 80056e4:	080056b9 	.word	0x080056b9
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	080056b9 	.word	0x080056b9
 80056f0:	080056b9 	.word	0x080056b9
 80056f4:	080056b9 	.word	0x080056b9
 80056f8:	080056b9 	.word	0x080056b9
 80056fc:	08005849 	.word	0x08005849
 8005700:	0800576d 	.word	0x0800576d
 8005704:	0800582b 	.word	0x0800582b
 8005708:	080056b9 	.word	0x080056b9
 800570c:	080056b9 	.word	0x080056b9
 8005710:	0800586b 	.word	0x0800586b
 8005714:	080056b9 	.word	0x080056b9
 8005718:	0800576d 	.word	0x0800576d
 800571c:	080056b9 	.word	0x080056b9
 8005720:	080056b9 	.word	0x080056b9
 8005724:	08005833 	.word	0x08005833
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	600a      	str	r2, [r1, #0]
 8005730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005738:	2301      	movs	r3, #1
 800573a:	e0a3      	b.n	8005884 <_printf_i+0x1f4>
 800573c:	6825      	ldr	r5, [r4, #0]
 800573e:	6808      	ldr	r0, [r1, #0]
 8005740:	062e      	lsls	r6, r5, #24
 8005742:	f100 0304 	add.w	r3, r0, #4
 8005746:	d50a      	bpl.n	800575e <_printf_i+0xce>
 8005748:	6805      	ldr	r5, [r0, #0]
 800574a:	600b      	str	r3, [r1, #0]
 800574c:	2d00      	cmp	r5, #0
 800574e:	da03      	bge.n	8005758 <_printf_i+0xc8>
 8005750:	232d      	movs	r3, #45	; 0x2d
 8005752:	426d      	negs	r5, r5
 8005754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005758:	485e      	ldr	r0, [pc, #376]	; (80058d4 <_printf_i+0x244>)
 800575a:	230a      	movs	r3, #10
 800575c:	e019      	b.n	8005792 <_printf_i+0x102>
 800575e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005762:	6805      	ldr	r5, [r0, #0]
 8005764:	600b      	str	r3, [r1, #0]
 8005766:	bf18      	it	ne
 8005768:	b22d      	sxthne	r5, r5
 800576a:	e7ef      	b.n	800574c <_printf_i+0xbc>
 800576c:	680b      	ldr	r3, [r1, #0]
 800576e:	6825      	ldr	r5, [r4, #0]
 8005770:	1d18      	adds	r0, r3, #4
 8005772:	6008      	str	r0, [r1, #0]
 8005774:	0628      	lsls	r0, r5, #24
 8005776:	d501      	bpl.n	800577c <_printf_i+0xec>
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	e002      	b.n	8005782 <_printf_i+0xf2>
 800577c:	0669      	lsls	r1, r5, #25
 800577e:	d5fb      	bpl.n	8005778 <_printf_i+0xe8>
 8005780:	881d      	ldrh	r5, [r3, #0]
 8005782:	4854      	ldr	r0, [pc, #336]	; (80058d4 <_printf_i+0x244>)
 8005784:	2f6f      	cmp	r7, #111	; 0x6f
 8005786:	bf0c      	ite	eq
 8005788:	2308      	moveq	r3, #8
 800578a:	230a      	movne	r3, #10
 800578c:	2100      	movs	r1, #0
 800578e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005792:	6866      	ldr	r6, [r4, #4]
 8005794:	60a6      	str	r6, [r4, #8]
 8005796:	2e00      	cmp	r6, #0
 8005798:	bfa2      	ittt	ge
 800579a:	6821      	ldrge	r1, [r4, #0]
 800579c:	f021 0104 	bicge.w	r1, r1, #4
 80057a0:	6021      	strge	r1, [r4, #0]
 80057a2:	b90d      	cbnz	r5, 80057a8 <_printf_i+0x118>
 80057a4:	2e00      	cmp	r6, #0
 80057a6:	d04d      	beq.n	8005844 <_printf_i+0x1b4>
 80057a8:	4616      	mov	r6, r2
 80057aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ae:	fb03 5711 	mls	r7, r3, r1, r5
 80057b2:	5dc7      	ldrb	r7, [r0, r7]
 80057b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057b8:	462f      	mov	r7, r5
 80057ba:	42bb      	cmp	r3, r7
 80057bc:	460d      	mov	r5, r1
 80057be:	d9f4      	bls.n	80057aa <_printf_i+0x11a>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d10b      	bne.n	80057dc <_printf_i+0x14c>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	07df      	lsls	r7, r3, #31
 80057c8:	d508      	bpl.n	80057dc <_printf_i+0x14c>
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	6861      	ldr	r1, [r4, #4]
 80057ce:	4299      	cmp	r1, r3
 80057d0:	bfde      	ittt	le
 80057d2:	2330      	movle	r3, #48	; 0x30
 80057d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057dc:	1b92      	subs	r2, r2, r6
 80057de:	6122      	str	r2, [r4, #16]
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	464b      	mov	r3, r9
 80057e6:	aa03      	add	r2, sp, #12
 80057e8:	4621      	mov	r1, r4
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7ff fee2 	bl	80055b4 <_printf_common>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d14c      	bne.n	800588e <_printf_i+0x1fe>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	b004      	add	sp, #16
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	4835      	ldr	r0, [pc, #212]	; (80058d4 <_printf_i+0x244>)
 8005800:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	680e      	ldr	r6, [r1, #0]
 8005808:	061f      	lsls	r7, r3, #24
 800580a:	f856 5b04 	ldr.w	r5, [r6], #4
 800580e:	600e      	str	r6, [r1, #0]
 8005810:	d514      	bpl.n	800583c <_printf_i+0x1ac>
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	bf44      	itt	mi
 8005816:	f043 0320 	orrmi.w	r3, r3, #32
 800581a:	6023      	strmi	r3, [r4, #0]
 800581c:	b91d      	cbnz	r5, 8005826 <_printf_i+0x196>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	f023 0320 	bic.w	r3, r3, #32
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	2310      	movs	r3, #16
 8005828:	e7b0      	b.n	800578c <_printf_i+0xfc>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	f043 0320 	orr.w	r3, r3, #32
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	2378      	movs	r3, #120	; 0x78
 8005834:	4828      	ldr	r0, [pc, #160]	; (80058d8 <_printf_i+0x248>)
 8005836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800583a:	e7e3      	b.n	8005804 <_printf_i+0x174>
 800583c:	065e      	lsls	r6, r3, #25
 800583e:	bf48      	it	mi
 8005840:	b2ad      	uxthmi	r5, r5
 8005842:	e7e6      	b.n	8005812 <_printf_i+0x182>
 8005844:	4616      	mov	r6, r2
 8005846:	e7bb      	b.n	80057c0 <_printf_i+0x130>
 8005848:	680b      	ldr	r3, [r1, #0]
 800584a:	6826      	ldr	r6, [r4, #0]
 800584c:	6960      	ldr	r0, [r4, #20]
 800584e:	1d1d      	adds	r5, r3, #4
 8005850:	600d      	str	r5, [r1, #0]
 8005852:	0635      	lsls	r5, r6, #24
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	d501      	bpl.n	800585c <_printf_i+0x1cc>
 8005858:	6018      	str	r0, [r3, #0]
 800585a:	e002      	b.n	8005862 <_printf_i+0x1d2>
 800585c:	0671      	lsls	r1, r6, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0x1c8>
 8005860:	8018      	strh	r0, [r3, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	4616      	mov	r6, r2
 8005868:	e7ba      	b.n	80057e0 <_printf_i+0x150>
 800586a:	680b      	ldr	r3, [r1, #0]
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	600a      	str	r2, [r1, #0]
 8005870:	681e      	ldr	r6, [r3, #0]
 8005872:	6862      	ldr	r2, [r4, #4]
 8005874:	2100      	movs	r1, #0
 8005876:	4630      	mov	r0, r6
 8005878:	f7fa fcba 	bl	80001f0 <memchr>
 800587c:	b108      	cbz	r0, 8005882 <_printf_i+0x1f2>
 800587e:	1b80      	subs	r0, r0, r6
 8005880:	6060      	str	r0, [r4, #4]
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	2300      	movs	r3, #0
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588c:	e7a8      	b.n	80057e0 <_printf_i+0x150>
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	4632      	mov	r2, r6
 8005892:	4649      	mov	r1, r9
 8005894:	4640      	mov	r0, r8
 8005896:	47d0      	blx	sl
 8005898:	3001      	adds	r0, #1
 800589a:	d0ab      	beq.n	80057f4 <_printf_i+0x164>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	079b      	lsls	r3, r3, #30
 80058a0:	d413      	bmi.n	80058ca <_printf_i+0x23a>
 80058a2:	68e0      	ldr	r0, [r4, #12]
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	4298      	cmp	r0, r3
 80058a8:	bfb8      	it	lt
 80058aa:	4618      	movlt	r0, r3
 80058ac:	e7a4      	b.n	80057f8 <_printf_i+0x168>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4632      	mov	r2, r6
 80058b2:	4649      	mov	r1, r9
 80058b4:	4640      	mov	r0, r8
 80058b6:	47d0      	blx	sl
 80058b8:	3001      	adds	r0, #1
 80058ba:	d09b      	beq.n	80057f4 <_printf_i+0x164>
 80058bc:	3501      	adds	r5, #1
 80058be:	68e3      	ldr	r3, [r4, #12]
 80058c0:	9903      	ldr	r1, [sp, #12]
 80058c2:	1a5b      	subs	r3, r3, r1
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	dcf2      	bgt.n	80058ae <_printf_i+0x21e>
 80058c8:	e7eb      	b.n	80058a2 <_printf_i+0x212>
 80058ca:	2500      	movs	r5, #0
 80058cc:	f104 0619 	add.w	r6, r4, #25
 80058d0:	e7f5      	b.n	80058be <_printf_i+0x22e>
 80058d2:	bf00      	nop
 80058d4:	08005e8d 	.word	0x08005e8d
 80058d8:	08005e9e 	.word	0x08005e9e

080058dc <_sbrk_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d06      	ldr	r5, [pc, #24]	; (80058f8 <_sbrk_r+0x1c>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fb f9a6 	bl	8000c38 <_sbrk>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_sbrk_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_sbrk_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20000250 	.word	0x20000250

080058fc <__sread>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	460c      	mov	r4, r1
 8005900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005904:	f000 f8a8 	bl	8005a58 <_read_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	bfab      	itete	ge
 800590c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800590e:	89a3      	ldrhlt	r3, [r4, #12]
 8005910:	181b      	addge	r3, r3, r0
 8005912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005916:	bfac      	ite	ge
 8005918:	6563      	strge	r3, [r4, #84]	; 0x54
 800591a:	81a3      	strhlt	r3, [r4, #12]
 800591c:	bd10      	pop	{r4, pc}

0800591e <__swrite>:
 800591e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005922:	461f      	mov	r7, r3
 8005924:	898b      	ldrh	r3, [r1, #12]
 8005926:	05db      	lsls	r3, r3, #23
 8005928:	4605      	mov	r5, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4616      	mov	r6, r2
 800592e:	d505      	bpl.n	800593c <__swrite+0x1e>
 8005930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005934:	2302      	movs	r3, #2
 8005936:	2200      	movs	r2, #0
 8005938:	f000 f870 	bl	8005a1c <_lseek_r>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	4632      	mov	r2, r6
 800594a:	463b      	mov	r3, r7
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005952:	f000 b817 	b.w	8005984 <_write_r>

08005956 <__sseek>:
 8005956:	b510      	push	{r4, lr}
 8005958:	460c      	mov	r4, r1
 800595a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595e:	f000 f85d 	bl	8005a1c <_lseek_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	bf15      	itete	ne
 8005968:	6560      	strne	r0, [r4, #84]	; 0x54
 800596a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800596e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005972:	81a3      	strheq	r3, [r4, #12]
 8005974:	bf18      	it	ne
 8005976:	81a3      	strhne	r3, [r4, #12]
 8005978:	bd10      	pop	{r4, pc}

0800597a <__sclose>:
 800597a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597e:	f000 b81b 	b.w	80059b8 <_close_r>
	...

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fa ff5c 	bl	8000850 <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20000250 	.word	0x20000250

080059a8 <abort>:
 80059a8:	b508      	push	{r3, lr}
 80059aa:	2006      	movs	r0, #6
 80059ac:	f000 f88e 	bl	8005acc <raise>
 80059b0:	2001      	movs	r0, #1
 80059b2:	f7fb f8e5 	bl	8000b80 <_exit>
	...

080059b8 <_close_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_close_r+0x1c>)
 80059bc:	2300      	movs	r3, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7fb f903 	bl	8000bce <_close>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_close_r+0x1a>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_close_r+0x1a>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000250 	.word	0x20000250

080059d8 <_fstat_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	; (80059f8 <_fstat_r+0x20>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	f7fb f8fe 	bl	8000be6 <_fstat>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d102      	bne.n	80059f4 <_fstat_r+0x1c>
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	b103      	cbz	r3, 80059f4 <_fstat_r+0x1c>
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	20000250 	.word	0x20000250

080059fc <_isatty_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	; (8005a18 <_isatty_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb f8fd 	bl	8000c06 <_isatty>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_isatty_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_isatty_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20000250 	.word	0x20000250

08005a1c <_lseek_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	; (8005a3c <_lseek_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fb f8f6 	bl	8000c1c <_lseek>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_lseek_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_lseek_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000250 	.word	0x20000250

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_lock+0x8>)
 8005a42:	f7ff bb45 	b.w	80050d0 <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	20000248 	.word	0x20000248

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f7ff bb40 	b.w	80050d2 <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	20000248 	.word	0x20000248

08005a58 <_read_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	; (8005a78 <_read_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb f894 	bl	8000b94 <_read>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_read_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_read_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20000250 	.word	0x20000250

08005a7c <_raise_r>:
 8005a7c:	291f      	cmp	r1, #31
 8005a7e:	b538      	push	{r3, r4, r5, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	d904      	bls.n	8005a90 <_raise_r+0x14>
 8005a86:	2316      	movs	r3, #22
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a92:	b112      	cbz	r2, 8005a9a <_raise_r+0x1e>
 8005a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a98:	b94b      	cbnz	r3, 8005aae <_raise_r+0x32>
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f830 	bl	8005b00 <_getpid_r>
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aaa:	f000 b817 	b.w	8005adc <_kill_r>
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d00a      	beq.n	8005ac8 <_raise_r+0x4c>
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	d103      	bne.n	8005abe <_raise_r+0x42>
 8005ab6:	2316      	movs	r3, #22
 8005ab8:	6003      	str	r3, [r0, #0]
 8005aba:	2001      	movs	r0, #1
 8005abc:	e7e7      	b.n	8005a8e <_raise_r+0x12>
 8005abe:	2400      	movs	r4, #0
 8005ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	4798      	blx	r3
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e7e0      	b.n	8005a8e <_raise_r+0x12>

08005acc <raise>:
 8005acc:	4b02      	ldr	r3, [pc, #8]	; (8005ad8 <raise+0xc>)
 8005ace:	4601      	mov	r1, r0
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	f7ff bfd3 	b.w	8005a7c <_raise_r>
 8005ad6:	bf00      	nop
 8005ad8:	20000010 	.word	0x20000010

08005adc <_kill_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_kill_r+0x20>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	f7fb f839 	bl	8000b60 <_kill>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	d102      	bne.n	8005af8 <_kill_r+0x1c>
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	b103      	cbz	r3, 8005af8 <_kill_r+0x1c>
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	bf00      	nop
 8005afc:	20000250 	.word	0x20000250

08005b00 <_getpid_r>:
 8005b00:	f7fb b826 	b.w	8000b50 <_getpid>

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
